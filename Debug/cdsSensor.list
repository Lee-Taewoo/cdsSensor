
cdsSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004d98  08004d98  00005d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df4  08004df4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004df4  08004df4  00005df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dfc  08004dfc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e00  08004e00  00005e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  08004e6c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08004e6c  00006324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001052c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f6  00000000  00000000  000165c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00018cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b96  00000000  00000000  00019ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019076  00000000  00000000  0001a73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001255e  00000000  00000000  000337b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf8d  00000000  00000000  00045d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1c9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a4  00000000  00000000  000e1ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e6288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d80 	.word	0x08004d80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004d80 	.word	0x08004d80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_TIM_PeriodElapsedCallback>:
uint16_t adcValue[2];
uint32_t adcSum = 0;
uint16_t adcDone = 0;

// 타이머가 리셋될 때 발생되는 인터럽트
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	adcSum += adcValue[1];
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800057a:	885b      	ldrh	r3, [r3, #2]
 800057c:	461a      	mov	r2, r3
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a09      	ldr	r2, [pc, #36]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000586:	6013      	str	r3, [r2, #0]
	if(adcDone > 0) {
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d005      	beq.n	800059c <HAL_TIM_PeriodElapsedCallback+0x2c>
		adcDone--;
 8000590:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800059a:	801a      	strh	r2, [r3, #0]
	}
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000084 	.word	0x20000084
 80005ac:	20000088 	.word	0x20000088
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <app>:

void app() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	// 시리얼 포트 초기화
	initUart(&huart2);
 80005b8:	480f      	ldr	r0, [pc, #60]	@ (80005f8 <app+0x44>)
 80005ba:	f000 fbd7 	bl	8000d6c <initUart>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValue, 2);
 80005be:	2202      	movs	r2, #2
 80005c0:	490e      	ldr	r1, [pc, #56]	@ (80005fc <app+0x48>)
 80005c2:	480f      	ldr	r0, [pc, #60]	@ (8000600 <app+0x4c>)
 80005c4:	f000 fdd8 	bl	8001178 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim3);
 80005c8:	480e      	ldr	r0, [pc, #56]	@ (8000604 <app+0x50>)
 80005ca:	f002 fc55 	bl	8002e78 <HAL_TIM_Base_Start_IT>
	while(1) {
		if (adcDone == 0) {
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <app+0x54>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1fb      	bne.n	80005ce <app+0x1a>
			printf("%ld\n", adcSum / 100);
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <app+0x58>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0d      	ldr	r2, [pc, #52]	@ (8000610 <app+0x5c>)
 80005dc:	fba2 2303 	umull	r2, r3, r2, r3
 80005e0:	095b      	lsrs	r3, r3, #5
 80005e2:	4619      	mov	r1, r3
 80005e4:	480b      	ldr	r0, [pc, #44]	@ (8000614 <app+0x60>)
 80005e6:	f003 fd5d 	bl	80040a4 <iprintf>
			adcSum = 0;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <app+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
			adcDone = 100;
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <app+0x54>)
 80005f2:	2264      	movs	r2, #100	@ 0x64
 80005f4:	801a      	strh	r2, [r3, #0]
		if (adcDone == 0) {
 80005f6:	e7ea      	b.n	80005ce <app+0x1a>
 80005f8:	20000180 	.word	0x20000180
 80005fc:	20000084 	.word	0x20000084
 8000600:	20000090 	.word	0x20000090
 8000604:	20000138 	.word	0x20000138
 8000608:	2000008c 	.word	0x2000008c
 800060c:	20000088 	.word	0x20000088
 8000610:	51eb851f 	.word	0x51eb851f
 8000614:	08004d98 	.word	0x08004d98

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fbe6 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f80e 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f96c 	bl	8000900 <MX_GPIO_Init>
  MX_DMA_Init();
 8000628:	f000 f94a 	bl	80008c0 <MX_DMA_Init>
  MX_ADC1_Init();
 800062c:	f000 f870 	bl	8000710 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f91c 	bl	800086c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000634:	f000 f8cc 	bl	80007d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000638:	f7ff ffbc 	bl	80005b4 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <main+0x24>

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	@ 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fd7d 	bl	800414e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a26      	ldr	r2, [pc, #152]	@ (8000708 <SystemClock_Config+0xc8>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <SystemClock_Config+0xc8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b21      	ldr	r3, [pc, #132]	@ (800070c <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a20      	ldr	r2, [pc, #128]	@ (800070c <SystemClock_Config+0xcc>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <SystemClock_Config+0xcc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 ff2f 	bl	8002528 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f930 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2103      	movs	r1, #3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 f991 	bl	8002a18 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006fc:	f000 f91a 	bl	8000934 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	@ 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000722:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000724:	4a29      	ldr	r2, [pc, #164]	@ (80007cc <MX_ADC1_Init+0xbc>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000728:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 800072a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800072e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000730:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000736:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000738:	2201      	movs	r2, #1
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800073c:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 800073e:	2201      	movs	r2, #1
 8000740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 800074c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000754:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000760:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000762:	2202      	movs	r2, #2
 8000764:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000768:	2201      	movs	r2, #1
 800076a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000770:	2201      	movs	r2, #1
 8000772:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000774:	4814      	ldr	r0, [pc, #80]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000776:	f000 fbab 	bl	8000ed0 <HAL_ADC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000780:	f000 f8d8 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800078c:	2304      	movs	r3, #4
 800078e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 8000796:	f000 fe07 	bl	80013a8 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80007a0:	f000 f8c8 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_ADC1_Init+0xb8>)
 80007b2:	f000 fdf9 	bl	80013a8 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80007bc:	f000 f8ba 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000090 	.word	0x20000090
 80007cc:	40012000 	.word	0x40012000

080007d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <MX_TIM3_Init+0x94>)
 80007ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000868 <MX_TIM3_Init+0x98>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_TIM3_Init+0x94>)
 80007f4:	2263      	movs	r2, #99	@ 0x63
 80007f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_TIM3_Init+0x94>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_TIM3_Init+0x94>)
 8000800:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000804:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_TIM3_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_TIM3_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000812:	4814      	ldr	r0, [pc, #80]	@ (8000864 <MX_TIM3_Init+0x94>)
 8000814:	f002 fae0 	bl	8002dd8 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f889 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4619      	mov	r1, r3
 800082e:	480d      	ldr	r0, [pc, #52]	@ (8000864 <MX_TIM3_Init+0x94>)
 8000830:	f002 fc74 	bl	800311c <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 f87b 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800083e:	2320      	movs	r3, #32
 8000840:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	@ (8000864 <MX_TIM3_Init+0x94>)
 800084c:	f002 fe7c 	bl	8003548 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000856:	f000 f86d 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000138 	.word	0x20000138
 8000868:	40000400 	.word	0x40000400

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <MX_USART2_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f002 fed2 	bl	800364c <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f841 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000180 	.word	0x20000180
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_DMA_Init+0x3c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <MX_DMA_Init+0x3c>)
 80008d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_DMA_Init+0x3c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2038      	movs	r0, #56	@ 0x38
 80008e8:	f001 f8f3 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008ec:	2038      	movs	r0, #56	@ 0x38
 80008ee:	f001 f90c 	bl	8001b0a <HAL_NVIC_EnableIRQ>

}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_GPIO_Init+0x30>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <MX_GPIO_Init+0x30>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_GPIO_Init+0x30>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a33      	ldr	r2, [pc, #204]	@ (8000a7c <HAL_ADC_MspInit+0xec>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d15f      	bne.n	8000a72 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b32      	ldr	r3, [pc, #200]	@ (8000a80 <HAL_ADC_MspInit+0xf0>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a31      	ldr	r2, [pc, #196]	@ (8000a80 <HAL_ADC_MspInit+0xf0>)
 80009bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <HAL_ADC_MspInit+0xf0>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <HAL_ADC_MspInit+0xf0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a80 <HAL_ADC_MspInit+0xf0>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b28      	ldr	r3, [pc, #160]	@ (8000a80 <HAL_ADC_MspInit+0xf0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80009ea:	2311      	movs	r3, #17
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ee:	2303      	movs	r3, #3
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4821      	ldr	r0, [pc, #132]	@ (8000a84 <HAL_ADC_MspInit+0xf4>)
 80009fe:	f001 fc0f 	bl	8002220 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <HAL_ADC_MspInit+0xfc>)
 8000a06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a46:	4810      	ldr	r0, [pc, #64]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a48:	f001 f87a 	bl	8001b40 <HAL_DMA_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000a52:	f7ff ff6f 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a0b      	ldr	r2, [pc, #44]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <HAL_ADC_MspInit+0xf8>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2012      	movs	r0, #18
 8000a68:	f001 f833 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a6c:	2012      	movs	r0, #18
 8000a6e:	f001 f84c 	bl	8001b0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	@ 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40012000 	.word	0x40012000
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000
 8000a88:	200000d8 	.word	0x200000d8
 8000a8c:	40026410 	.word	0x40026410

08000a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x48>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d115      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <HAL_TIM_Base_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000adc <HAL_TIM_Base_MspInit+0x4c>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <HAL_TIM_Base_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	201d      	movs	r0, #29
 8000ac4:	f001 f805 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ac8:	201d      	movs	r0, #29
 8000aca:	f001 f81e 	bl	8001b0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40000400 	.word	0x40000400
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	@ (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b56:	f001 fb63 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	@ 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc6:	f000 f963 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <ADC_IRQHandler+0x10>)
 8000bd6:	f000 f9be 	bl	8000f56 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000090 	.word	0x20000090

08000be4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <TIM3_IRQHandler+0x10>)
 8000bea:	f002 f9a7 	bl	8002f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000138 	.word	0x20000138

08000bf8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <DMA2_Stream0_IRQHandler+0x10>)
 8000bfe:	f001 f8a5 	bl	8001d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000d8 	.word	0x200000d8

08000c0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e00a      	b.n	8000c34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c1e:	f3af 8000 	nop.w
 8000c22:	4601      	mov	r1, r0
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf0      	blt.n	8000c1e <_read+0x12>
  }

  return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_isatty>:

int _isatty(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	@ (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f003 fa84 	bl	80041ec <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	@ (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20020000 	.word	0x20020000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	200001c8 	.word	0x200001c8
 8000d18:	20000328 	.word	0x20000328

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <_write>:
uint8_t rxCharacter;
uint8_t rxBuffer[rxBufferMax]; //circle buffer
int rxBufferReadIndex; // 읽기 위치
int rxBufferWriteIndex; // 쓰기 위치

int _write(int file, char* p, int len) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t*)p, len, 10);
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <_write+0x28>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	230a      	movs	r3, #10
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	f002 fcc8 	bl	80036ec <HAL_UART_Transmit>
	return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200001cc 	.word	0x200001cc

08000d6c <initUart>:
	// 인터럽트 재장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
}

// uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	// uart 장치 주소 백업
	myHuart = inHuart;
 8000d74:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <initUart+0x24>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
	// 인터럽트 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8000d7a:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <initUart+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4904      	ldr	r1, [pc, #16]	@ (8000d94 <initUart+0x28>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 fd3d 	bl	8003802 <HAL_UART_Receive_IT>

}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200001cc 	.word	0x200001cc
 8000d94:	200001d0 	.word	0x200001d0

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d9c:	f7ff ffbe 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	@ (8000de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f003 fa17 	bl	80041f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fc25 	bl	8000618 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ddc:	08004e04 	.word	0x08004e04
  ldr r2, =_sbss
 8000de0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000de4:	20000324 	.word	0x20000324

08000de8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <DMA1_Stream0_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 fe51 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fd8e 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fe69 	bl	8001b26 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 fe31 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200001d4 	.word	0x200001d4

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001d4 	.word	0x200001d4

08000ed0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e033      	b.n	8000f4e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d109      	bne.n	8000f02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fd4e 	bl	8000990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d118      	bne.n	8000f40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f16:	f023 0302 	bic.w	r3, r3, #2
 8000f1a:	f043 0202 	orr.w	r2, r3, #2
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fb72 	bl	800160c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f023 0303 	bic.w	r3, r3, #3
 8000f36:	f043 0201 	orr.w	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f3e:	e001      	b.n	8000f44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f003 0320 	and.w	r3, r3, #32
 8000f84:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d049      	beq.n	8001020 <HAL_ADC_IRQHandler+0xca>
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d046      	beq.n	8001020 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d12b      	bne.n	8001010 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d127      	bne.n	8001010 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d119      	bne.n	8001010 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0220 	bic.w	r2, r2, #32
 8000fea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f9a1 	bl	8001358 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f06f 0212 	mvn.w	r2, #18
 800101e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800102e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d057      	beq.n	80010e6 <HAL_ADC_IRQHandler+0x190>
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d054      	beq.n	80010e6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d139      	bne.n	80010d6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001068:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800107a:	2b00      	cmp	r3, #0
 800107c:	d12b      	bne.n	80010d6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001088:	2b00      	cmp	r3, #0
 800108a:	d124      	bne.n	80010d6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001096:	2b00      	cmp	r3, #0
 8001098:	d11d      	bne.n	80010d6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d119      	bne.n	80010d6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010b0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d105      	bne.n	80010d6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fc16 	bl	8001908 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f06f 020c 	mvn.w	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010f4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d017      	beq.n	800112c <HAL_ADC_IRQHandler+0x1d6>
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d014      	beq.n	800112c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d10d      	bne.n	800112c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f92f 	bl	8001380 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f06f 0201 	mvn.w	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800113a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d015      	beq.n	800116e <HAL_ADC_IRQHandler+0x218>
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d012      	beq.n	800116e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114c:	f043 0202 	orr.w	r2, r3, #2
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f06f 0220 	mvn.w	r2, #32
 800115c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f918 	bl	8001394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f06f 0220 	mvn.w	r2, #32
 800116c:	601a      	str	r2, [r3, #0]
  }
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_ADC_Start_DMA+0x1e>
 8001192:	2302      	movs	r3, #2
 8001194:	e0ce      	b.n	8001334 <HAL_ADC_Start_DMA+0x1bc>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d018      	beq.n	80011de <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0201 	orr.w	r2, r2, #1
 80011ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011bc:	4b5f      	ldr	r3, [pc, #380]	@ (800133c <HAL_ADC_Start_DMA+0x1c4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a5f      	ldr	r2, [pc, #380]	@ (8001340 <HAL_ADC_Start_DMA+0x1c8>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	0c9a      	lsrs	r2, r3, #18
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80011d0:	e002      	b.n	80011d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f9      	bne.n	80011d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011ec:	d107      	bne.n	80011fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011fc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b01      	cmp	r3, #1
 800120a:	f040 8086 	bne.w	800131a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001238:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800124c:	d106      	bne.n	800125c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f023 0206 	bic.w	r2, r3, #6
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	645a      	str	r2, [r3, #68]	@ 0x44
 800125a:	e002      	b.n	8001262 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126a:	4b36      	ldr	r3, [pc, #216]	@ (8001344 <HAL_ADC_Start_DMA+0x1cc>)
 800126c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001272:	4a35      	ldr	r2, [pc, #212]	@ (8001348 <HAL_ADC_Start_DMA+0x1d0>)
 8001274:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800127a:	4a34      	ldr	r2, [pc, #208]	@ (800134c <HAL_ADC_Start_DMA+0x1d4>)
 800127c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001282:	4a33      	ldr	r2, [pc, #204]	@ (8001350 <HAL_ADC_Start_DMA+0x1d8>)
 8001284:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800128e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800129e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012ae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	334c      	adds	r3, #76	@ 0x4c
 80012ba:	4619      	mov	r1, r3
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f000 fcec 	bl	8001c9c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10f      	bne.n	80012f0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d129      	bne.n	8001332 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	e020      	b.n	8001332 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <HAL_ADC_Start_DMA+0x1dc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d11b      	bne.n	8001332 <HAL_ADC_Start_DMA+0x1ba>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d114      	bne.n	8001332 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	e00b      	b.n	8001332 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f043 0210 	orr.w	r2, r3, #16
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000000 	.word	0x20000000
 8001340:	431bde83 	.word	0x431bde83
 8001344:	40012300 	.word	0x40012300
 8001348:	08001805 	.word	0x08001805
 800134c:	080018bf 	.word	0x080018bf
 8001350:	080018db 	.word	0x080018db
 8001354:	40012000 	.word	0x40012000

08001358 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1c>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e113      	b.n	80015ec <HAL_ADC_ConfigChannel+0x244>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b09      	cmp	r3, #9
 80013d2:	d925      	bls.n	8001420 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68d9      	ldr	r1, [r3, #12]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	3b1e      	subs	r3, #30
 80013ea:	2207      	movs	r2, #7
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43da      	mvns	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	400a      	ands	r2, r1
 80013f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68d9      	ldr	r1, [r3, #12]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	4603      	mov	r3, r0
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4403      	add	r3, r0
 8001412:	3b1e      	subs	r3, #30
 8001414:	409a      	lsls	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	e022      	b.n	8001466 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6919      	ldr	r1, [r3, #16]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	2207      	movs	r2, #7
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	400a      	ands	r2, r1
 8001442:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6919      	ldr	r1, [r3, #16]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	4603      	mov	r3, r0
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4403      	add	r3, r0
 800145c:	409a      	lsls	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b06      	cmp	r3, #6
 800146c:	d824      	bhi.n	80014b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	3b05      	subs	r3, #5
 8001480:	221f      	movs	r2, #31
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	400a      	ands	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	3b05      	subs	r3, #5
 80014aa:	fa00 f203 	lsl.w	r2, r0, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b6:	e04c      	b.n	8001552 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d824      	bhi.n	800150a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	3b23      	subs	r3, #35	@ 0x23
 80014d2:	221f      	movs	r2, #31
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43da      	mvns	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	400a      	ands	r2, r1
 80014e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3b23      	subs	r3, #35	@ 0x23
 80014fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	631a      	str	r2, [r3, #48]	@ 0x30
 8001508:	e023      	b.n	8001552 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	3b41      	subs	r3, #65	@ 0x41
 800151c:	221f      	movs	r2, #31
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b41      	subs	r3, #65	@ 0x41
 8001546:	fa00 f203 	lsl.w	r2, r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001552:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <HAL_ADC_ConfigChannel+0x250>)
 8001554:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a28      	ldr	r2, [pc, #160]	@ (80015fc <HAL_ADC_ConfigChannel+0x254>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d10f      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1d8>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b12      	cmp	r3, #18
 8001566:	d10b      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1d      	ldr	r2, [pc, #116]	@ (80015fc <HAL_ADC_ConfigChannel+0x254>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d12b      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x23a>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <HAL_ADC_ConfigChannel+0x258>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d003      	beq.n	800159c <HAL_ADC_ConfigChannel+0x1f4>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b11      	cmp	r3, #17
 800159a:	d122      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <HAL_ADC_ConfigChannel+0x258>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d111      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_ADC_ConfigChannel+0x25c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a11      	ldr	r2, [pc, #68]	@ (8001608 <HAL_ADC_ConfigChannel+0x260>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9a      	lsrs	r2, r3, #18
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015d4:	e002      	b.n	80015dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40012300 	.word	0x40012300
 80015fc:	40012000 	.word	0x40012000
 8001600:	10000012 	.word	0x10000012
 8001604:	20000000 	.word	0x20000000
 8001608:	431bde83 	.word	0x431bde83

0800160c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001614:	4b79      	ldr	r3, [pc, #484]	@ (80017fc <ADC_Init+0x1f0>)
 8001616:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	431a      	orrs	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	021a      	lsls	r2, r3, #8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6899      	ldr	r1, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169e:	4a58      	ldr	r2, [pc, #352]	@ (8001800 <ADC_Init+0x1f4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d022      	beq.n	80016ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6899      	ldr	r1, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	e00f      	b.n	800170a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001708:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0202 	bic.w	r2, r2, #2
 8001718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6899      	ldr	r1, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e1b      	ldrb	r3, [r3, #24]
 8001724:	005a      	lsls	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01b      	beq.n	8001770 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001746:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001756:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6859      	ldr	r1, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	3b01      	subs	r3, #1
 8001764:	035a      	lsls	r2, r3, #13
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	e007      	b.n	8001780 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800177e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	3b01      	subs	r3, #1
 800179c:	051a      	lsls	r2, r3, #20
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017c2:	025a      	lsls	r2, r3, #9
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6899      	ldr	r1, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	029a      	lsls	r2, r3, #10
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40012300 	.word	0x40012300
 8001800:	0f000001 	.word	0x0f000001

08001804 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001810:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800181a:	2b00      	cmp	r3, #0
 800181c:	d13c      	bne.n	8001898 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d12b      	bne.n	8001890 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800183c:	2b00      	cmp	r3, #0
 800183e:	d127      	bne.n	8001890 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001846:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001858:	2b00      	cmp	r3, #0
 800185a:	d119      	bne.n	8001890 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0220 	bic.w	r2, r2, #32
 800186a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff fd61 	bl	8001358 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001896:	e00e      	b.n	80018b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7ff fd75 	bl	8001394 <HAL_ADC_ErrorCallback>
}
 80018aa:	e004      	b.n	80018b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	4798      	blx	r3
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7ff fd4d 	bl	800136c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2240      	movs	r2, #64	@ 0x40
 80018ec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	f043 0204 	orr.w	r2, r3, #4
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f7ff fd4a 	bl	8001394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	@ (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	@ (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff29 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff3e 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff31 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff f9b4 	bl	8000eb8 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e099      	b.n	8001c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7c:	e00f      	b.n	8001b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b7e:	f7ff f99b 	bl	8000eb8 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d908      	bls.n	8001b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2203      	movs	r2, #3
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e078      	b.n	8001c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e8      	bne.n	8001b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <HAL_DMA_Init+0x158>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d107      	bne.n	8001c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4313      	orrs	r3, r2
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f023 0307 	bic.w	r3, r3, #7
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d117      	bne.n	8001c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00e      	beq.n	8001c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fa6f 	bl	8002128 <DMA_CheckFifoParam>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2240      	movs	r2, #64	@ 0x40
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e016      	b.n	8001c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa26 	bl	80020bc <DMA_CalcBaseAndBitshift>
 8001c70:	4603      	mov	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c78:	223f      	movs	r2, #63	@ 0x3f
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	f010803f 	.word	0xf010803f

08001c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_DMA_Start_IT+0x26>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e040      	b.n	8001d44 <HAL_DMA_Start_IT+0xa8>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d12f      	bne.n	8001d36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f9b8 	bl	8002060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf4:	223f      	movs	r2, #63	@ 0x3f
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0216 	orr.w	r2, r2, #22
 8001d0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0208 	orr.w	r2, r2, #8
 8001d22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e005      	b.n	8001d42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d58:	4b8e      	ldr	r3, [pc, #568]	@ (8001f94 <HAL_DMA_IRQHandler+0x248>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a8e      	ldr	r2, [pc, #568]	@ (8001f98 <HAL_DMA_IRQHandler+0x24c>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0a9b      	lsrs	r3, r3, #10
 8001d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	2208      	movs	r2, #8
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01a      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0204 	bic.w	r2, r2, #4
 8001d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	2208      	movs	r2, #8
 8001da6:	409a      	lsls	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d012      	beq.n	8001dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	2201      	movs	r2, #1
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df2:	2204      	movs	r2, #4
 8001df4:	409a      	lsls	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d012      	beq.n	8001e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	2204      	movs	r2, #4
 8001e12:	409a      	lsls	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1c:	f043 0204 	orr.w	r2, r3, #4
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	2210      	movs	r2, #16
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d043      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d03c      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e46:	2210      	movs	r2, #16
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d018      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d108      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d024      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
 8001e7a:	e01f      	b.n	8001ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01b      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
 8001e8c:	e016      	b.n	8001ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0208 	bic.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 808f 	beq.w	8001fec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 8087 	beq.w	8001fec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d136      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0216 	bic.w	r2, r2, #22
 8001f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <HAL_DMA_IRQHandler+0x1da>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0208 	bic.w	r2, r2, #8
 8001f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3a:	223f      	movs	r2, #63	@ 0x3f
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d07e      	beq.n	8002058 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
        }
        return;
 8001f62:	e079      	b.n	8002058 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01d      	beq.n	8001fae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10d      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d031      	beq.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
 8001f90:	e02c      	b.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000
 8001f98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4798      	blx	r3
 8001fac:	e01e      	b.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10f      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0210 	bic.w	r2, r2, #16
 8001fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d032      	beq.n	800205a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d022      	beq.n	8002046 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2205      	movs	r2, #5
 8002004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	3301      	adds	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	d307      	bcc.n	8002034 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f2      	bne.n	8002018 <HAL_DMA_IRQHandler+0x2cc>
 8002032:	e000      	b.n	8002036 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002034:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
 8002056:	e000      	b.n	800205a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002058:	bf00      	nop
    }
  }
}
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800207c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b40      	cmp	r3, #64	@ 0x40
 800208c:	d108      	bne.n	80020a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800209e:	e007      	b.n	80020b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	3b10      	subs	r3, #16
 80020cc:	4a14      	ldr	r2, [pc, #80]	@ (8002120 <DMA_CalcBaseAndBitshift+0x64>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020d6:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <DMA_CalcBaseAndBitshift+0x68>)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d909      	bls.n	80020fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020f2:	f023 0303 	bic.w	r3, r3, #3
 80020f6:	1d1a      	adds	r2, r3, #4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80020fc:	e007      	b.n	800210e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	aaaaaaab 	.word	0xaaaaaaab
 8002124:	08004db8 	.word	0x08004db8

08002128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d11f      	bne.n	8002182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d856      	bhi.n	80021f6 <DMA_CheckFifoParam+0xce>
 8002148:	a201      	add	r2, pc, #4	@ (adr r2, 8002150 <DMA_CheckFifoParam+0x28>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002161 	.word	0x08002161
 8002154:	08002173 	.word	0x08002173
 8002158:	08002161 	.word	0x08002161
 800215c:	080021f7 	.word	0x080021f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d046      	beq.n	80021fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002170:	e043      	b.n	80021fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002176:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800217a:	d140      	bne.n	80021fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002180:	e03d      	b.n	80021fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800218a:	d121      	bne.n	80021d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d837      	bhi.n	8002202 <DMA_CheckFifoParam+0xda>
 8002192:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <DMA_CheckFifoParam+0x70>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	080021a9 	.word	0x080021a9
 800219c:	080021af 	.word	0x080021af
 80021a0:	080021a9 	.word	0x080021a9
 80021a4:	080021c1 	.word	0x080021c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
      break;
 80021ac:	e030      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d025      	beq.n	8002206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021be:	e022      	b.n	8002206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021c8:	d11f      	bne.n	800220a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ce:	e01c      	b.n	800220a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d903      	bls.n	80021de <DMA_CheckFifoParam+0xb6>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d003      	beq.n	80021e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021dc:	e018      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
      break;
 80021e2:	e015      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00e      	beq.n	800220e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
      break;
 80021f4:	e00b      	b.n	800220e <DMA_CheckFifoParam+0xe6>
      break;
 80021f6:	bf00      	nop
 80021f8:	e00a      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 80021fa:	bf00      	nop
 80021fc:	e008      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 80021fe:	bf00      	nop
 8002200:	e006      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 8002202:	bf00      	nop
 8002204:	e004      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 8002206:	bf00      	nop
 8002208:	e002      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;   
 800220a:	bf00      	nop
 800220c:	e000      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
    }
  } 
  
  return status; 
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	@ 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e159      	b.n	80024f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 8148 	bne.w	80024ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a2 	beq.w	80024ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b57      	ldr	r3, [pc, #348]	@ (8002508 <HAL_GPIO_Init+0x2e8>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	4a56      	ldr	r2, [pc, #344]	@ (8002508 <HAL_GPIO_Init+0x2e8>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b6:	4b54      	ldr	r3, [pc, #336]	@ (8002508 <HAL_GPIO_Init+0x2e8>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c2:	4a52      	ldr	r2, [pc, #328]	@ (800250c <HAL_GPIO_Init+0x2ec>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a49      	ldr	r2, [pc, #292]	@ (8002510 <HAL_GPIO_Init+0x2f0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x202>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a48      	ldr	r2, [pc, #288]	@ (8002514 <HAL_GPIO_Init+0x2f4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x1fe>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a47      	ldr	r2, [pc, #284]	@ (8002518 <HAL_GPIO_Init+0x2f8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x1fa>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a46      	ldr	r2, [pc, #280]	@ (800251c <HAL_GPIO_Init+0x2fc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x1f6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a45      	ldr	r2, [pc, #276]	@ (8002520 <HAL_GPIO_Init+0x300>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x1f2>
 800240e:	2304      	movs	r3, #4
 8002410:	e008      	b.n	8002424 <HAL_GPIO_Init+0x204>
 8002412:	2307      	movs	r3, #7
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x204>
 8002416:	2303      	movs	r3, #3
 8002418:	e004      	b.n	8002424 <HAL_GPIO_Init+0x204>
 800241a:	2302      	movs	r3, #2
 800241c:	e002      	b.n	8002424 <HAL_GPIO_Init+0x204>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_GPIO_Init+0x204>
 8002422:	2300      	movs	r3, #0
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	f002 0203 	and.w	r2, r2, #3
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	4093      	lsls	r3, r2
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002434:	4935      	ldr	r1, [pc, #212]	@ (800250c <HAL_GPIO_Init+0x2ec>)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b38      	ldr	r3, [pc, #224]	@ (8002524 <HAL_GPIO_Init+0x304>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002466:	4a2f      	ldr	r2, [pc, #188]	@ (8002524 <HAL_GPIO_Init+0x304>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <HAL_GPIO_Init+0x304>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002490:	4a24      	ldr	r2, [pc, #144]	@ (8002524 <HAL_GPIO_Init+0x304>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002496:	4b23      	ldr	r3, [pc, #140]	@ (8002524 <HAL_GPIO_Init+0x304>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <HAL_GPIO_Init+0x304>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_GPIO_Init+0x304>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002524 <HAL_GPIO_Init+0x304>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	f67f aea2 	bls.w	800223c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3724      	adds	r7, #36	@ 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	40013800 	.word	0x40013800
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40021000 	.word	0x40021000
 8002524:	40013c00 	.word	0x40013c00

08002528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e267      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d075      	beq.n	8002632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002546:	4b88      	ldr	r3, [pc, #544]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b04      	cmp	r3, #4
 8002550:	d00c      	beq.n	800256c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002552:	4b85      	ldr	r3, [pc, #532]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800255a:	2b08      	cmp	r3, #8
 800255c:	d112      	bne.n	8002584 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255e:	4b82      	ldr	r3, [pc, #520]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800256a:	d10b      	bne.n	8002584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	4b7e      	ldr	r3, [pc, #504]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05b      	beq.n	8002630 <HAL_RCC_OscConfig+0x108>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d157      	bne.n	8002630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e242      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800258c:	d106      	bne.n	800259c <HAL_RCC_OscConfig+0x74>
 800258e:	4b76      	ldr	r3, [pc, #472]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a75      	ldr	r2, [pc, #468]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0xb0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x98>
 80025a6:	4b70      	ldr	r3, [pc, #448]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0xb0>
 80025c0:	4b69      	ldr	r3, [pc, #420]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a68      	ldr	r2, [pc, #416]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b66      	ldr	r3, [pc, #408]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a65      	ldr	r2, [pc, #404]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe fc6a 	bl	8000eb8 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fc66 	bl	8000eb8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e207      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0xc0>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fc56 	bl	8000eb8 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe fc52 	bl	8000eb8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1f3      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b51      	ldr	r3, [pc, #324]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0xe8>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d063      	beq.n	8002706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800263e:	4b4a      	ldr	r3, [pc, #296]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264a:	4b47      	ldr	r3, [pc, #284]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002652:	2b08      	cmp	r3, #8
 8002654:	d11c      	bne.n	8002690 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002656:	4b44      	ldr	r3, [pc, #272]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x152>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e1c7      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b3b      	ldr	r3, [pc, #236]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4937      	ldr	r1, [pc, #220]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	e03a      	b.n	8002706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002698:	4b34      	ldr	r3, [pc, #208]	@ (800276c <HAL_RCC_OscConfig+0x244>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe fc0b 	bl	8000eb8 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7fe fc07 	bl	8000eb8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e1a8      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4925      	ldr	r1, [pc, #148]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]
 80026d8:	e015      	b.n	8002706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026da:	4b24      	ldr	r3, [pc, #144]	@ (800276c <HAL_RCC_OscConfig+0x244>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fbea 	bl	8000eb8 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e8:	f7fe fbe6 	bl	8000eb8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e187      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d036      	beq.n	8002780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_RCC_OscConfig+0x248>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe fbca 	bl	8000eb8 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002728:	f7fe fbc6 	bl	8000eb8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e167      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800273c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x200>
 8002746:	e01b      	b.n	8002780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_OscConfig+0x248>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7fe fbb3 	bl	8000eb8 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	e00e      	b.n	8002774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002756:	f7fe fbaf 	bl	8000eb8 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d907      	bls.n	8002774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e150      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
 8002768:	40023800 	.word	0x40023800
 800276c:	42470000 	.word	0x42470000
 8002770:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	4b88      	ldr	r3, [pc, #544]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ea      	bne.n	8002756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8097 	beq.w	80028bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002792:	4b81      	ldr	r3, [pc, #516]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10f      	bne.n	80027be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ba:	2301      	movs	r3, #1
 80027bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b77      	ldr	r3, [pc, #476]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d118      	bne.n	80027fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ca:	4b74      	ldr	r3, [pc, #464]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a73      	ldr	r2, [pc, #460]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d6:	f7fe fb6f 	bl	8000eb8 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7fe fb6b 	bl	8000eb8 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e10c      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	4b6a      	ldr	r3, [pc, #424]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x2ea>
 8002804:	4b64      	ldr	r3, [pc, #400]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a63      	ldr	r2, [pc, #396]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002810:	e01c      	b.n	800284c <HAL_RCC_OscConfig+0x324>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b05      	cmp	r3, #5
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x30c>
 800281a:	4b5f      	ldr	r3, [pc, #380]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	4a5e      	ldr	r2, [pc, #376]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
 8002826:	4b5c      	ldr	r3, [pc, #368]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	4a5b      	ldr	r2, [pc, #364]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6713      	str	r3, [r2, #112]	@ 0x70
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0x324>
 8002834:	4b58      	ldr	r3, [pc, #352]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a57      	ldr	r2, [pc, #348]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	4b55      	ldr	r3, [pc, #340]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4a54      	ldr	r2, [pc, #336]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002846:	f023 0304 	bic.w	r3, r3, #4
 800284a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe fb30 	bl	8000eb8 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe fb2c 	bl	8000eb8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0cb      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	4b49      	ldr	r3, [pc, #292]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ee      	beq.n	800285c <HAL_RCC_OscConfig+0x334>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002880:	f7fe fb1a 	bl	8000eb8 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe fb16 	bl	8000eb8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0b5      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289e:	4b3e      	ldr	r3, [pc, #248]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ee      	bne.n	8002888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b0:	4b39      	ldr	r3, [pc, #228]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	4a38      	ldr	r2, [pc, #224]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80a1 	beq.w	8002a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028c6:	4b34      	ldr	r3, [pc, #208]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d05c      	beq.n	800298c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d141      	bne.n	800295e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b31      	ldr	r3, [pc, #196]	@ (80029a0 <HAL_RCC_OscConfig+0x478>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe faea 	bl	8000eb8 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe fae6 	bl	8000eb8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e087      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b27      	ldr	r3, [pc, #156]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	3b01      	subs	r3, #1
 8002920:	041b      	lsls	r3, r3, #16
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	491b      	ldr	r1, [pc, #108]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x478>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe fabf 	bl	8000eb8 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe fabb 	bl	8000eb8 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e05c      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x416>
 800295c:	e054      	b.n	8002a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_RCC_OscConfig+0x478>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe faa8 	bl	8000eb8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe faa4 	bl	8000eb8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e045      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x444>
 800298a:	e03d      	b.n	8002a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e038      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
 8002998:	40023800 	.word	0x40023800
 800299c:	40007000 	.word	0x40007000
 80029a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x4ec>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d028      	beq.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d121      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d11a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029dc:	4293      	cmp	r3, r2
 80029de:	d111      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	3b01      	subs	r3, #1
 80029ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800

08002a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0cc      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b68      	ldr	r3, [pc, #416]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d90c      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b65      	ldr	r3, [pc, #404]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b63      	ldr	r3, [pc, #396]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b8      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a6c:	4b59      	ldr	r3, [pc, #356]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a58      	ldr	r2, [pc, #352]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a84:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a52      	ldr	r2, [pc, #328]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b50      	ldr	r3, [pc, #320]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	494d      	ldr	r1, [pc, #308]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d044      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b47      	ldr	r3, [pc, #284]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d119      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e067      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b37      	ldr	r3, [pc, #220]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4934      	ldr	r1, [pc, #208]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fe f9d6 	bl	8000eb8 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe f9d2 	bl	8000eb8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e04f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b25      	ldr	r3, [pc, #148]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d20c      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e032      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4916      	ldr	r1, [pc, #88]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8a:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	490e      	ldr	r1, [pc, #56]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9e:	f000 f821 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	490a      	ldr	r1, [pc, #40]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe f936 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	08004da0 	.word	0x08004da0
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be8:	b090      	sub	sp, #64	@ 0x40
 8002bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bfc:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d00d      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x40>
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	f200 80a1 	bhi.w	8002d50 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x34>
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c16:	e09b      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c18:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c1c:	e09b      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c1e:	4b53      	ldr	r3, [pc, #332]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c22:	e098      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c24:	4b4f      	ldr	r3, [pc, #316]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d028      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	099b      	lsrs	r3, r3, #6
 8002c40:	2200      	movs	r2, #0
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4b47      	ldr	r3, [pc, #284]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c50:	fb03 f201 	mul.w	r2, r3, r1
 8002c54:	2300      	movs	r3, #0
 8002c56:	fb00 f303 	mul.w	r3, r0, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a43      	ldr	r2, [pc, #268]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c5e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c64:	460a      	mov	r2, r1
 8002c66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c6a:	4413      	add	r3, r2
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c70:	2200      	movs	r2, #0
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	61fa      	str	r2, [r7, #28]
 8002c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c7e:	f7fd faff 	bl	8000280 <__aeabi_uldivmod>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4613      	mov	r3, r2
 8002c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c8a:	e053      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8c:	4b35      	ldr	r3, [pc, #212]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	2200      	movs	r2, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	617a      	str	r2, [r7, #20]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c9e:	f04f 0b00 	mov.w	fp, #0
 8002ca2:	4652      	mov	r2, sl
 8002ca4:	465b      	mov	r3, fp
 8002ca6:	f04f 0000 	mov.w	r0, #0
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	0159      	lsls	r1, r3, #5
 8002cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb4:	0150      	lsls	r0, r2, #5
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	ebb2 080a 	subs.w	r8, r2, sl
 8002cbe:	eb63 090b 	sbc.w	r9, r3, fp
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cd6:	ebb2 0408 	subs.w	r4, r2, r8
 8002cda:	eb63 0509 	sbc.w	r5, r3, r9
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	00eb      	lsls	r3, r5, #3
 8002ce8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cec:	00e2      	lsls	r2, r4, #3
 8002cee:	4614      	mov	r4, r2
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	eb14 030a 	adds.w	r3, r4, sl
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	eb45 030b 	adc.w	r3, r5, fp
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	028b      	lsls	r3, r1, #10
 8002d0e:	4621      	mov	r1, r4
 8002d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d14:	4621      	mov	r1, r4
 8002d16:	028a      	lsls	r2, r1, #10
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	60fa      	str	r2, [r7, #12]
 8002d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d28:	f7fd faaa 	bl	8000280 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4613      	mov	r3, r2
 8002d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d4e:	e002      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3740      	adds	r7, #64	@ 0x40
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	017d7840 	.word	0x017d7840

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	@ (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0a9b      	lsrs	r3, r3, #10
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	@ (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	08004db0 	.word	0x08004db0

08002db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002db4:	f7ff ffdc 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0b5b      	lsrs	r3, r3, #13
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4903      	ldr	r1, [pc, #12]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	08004db0 	.word	0x08004db0

08002dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e041      	b.n	8002e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fe46 	bl	8000a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 fa70 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d001      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e044      	b.n	8002f1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1e      	ldr	r2, [pc, #120]	@ (8002f28 <HAL_TIM_Base_Start_IT+0xb0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eba:	d013      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f2c <HAL_TIM_Base_Start_IT+0xb4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a19      	ldr	r2, [pc, #100]	@ (8002f30 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a17      	ldr	r2, [pc, #92]	@ (8002f34 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a16      	ldr	r2, [pc, #88]	@ (8002f38 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d111      	bne.n	8002f08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d010      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f06:	e007      	b.n	8002f18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40014000 	.word	0x40014000

08002f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d020      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0202 	mvn.w	r2, #2
 8002f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f999 	bl	80032be <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e005      	b.n	8002f9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f98b 	bl	80032aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f99c 	bl	80032d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d020      	beq.n	8002fec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01b      	beq.n	8002fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0204 	mvn.w	r2, #4
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f973 	bl	80032be <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f965 	bl	80032aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f976 	bl	80032d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d020      	beq.n	8003038 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0208 	mvn.w	r2, #8
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2204      	movs	r2, #4
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f94d 	bl	80032be <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f93f 	bl	80032aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f950 	bl	80032d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d020      	beq.n	8003084 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0210 	mvn.w	r2, #16
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2208      	movs	r2, #8
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f927 	bl	80032be <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f919 	bl	80032aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f92a 	bl	80032d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0201 	mvn.w	r2, #1
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fa64 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fab6 	bl	8003638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8fb 	bl	80032e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0220 	mvn.w	r2, #32
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa88 	bl	8003624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIM_ConfigClockSource+0x1c>
 8003134:	2302      	movs	r3, #2
 8003136:	e0b4      	b.n	80032a2 <HAL_TIM_ConfigClockSource+0x186>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800315e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003170:	d03e      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003176:	f200 8087 	bhi.w	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317e:	f000 8086 	beq.w	800328e <HAL_TIM_ConfigClockSource+0x172>
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003186:	d87f      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 8003188:	2b70      	cmp	r3, #112	@ 0x70
 800318a:	d01a      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0xa6>
 800318c:	2b70      	cmp	r3, #112	@ 0x70
 800318e:	d87b      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 8003190:	2b60      	cmp	r3, #96	@ 0x60
 8003192:	d050      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x11a>
 8003194:	2b60      	cmp	r3, #96	@ 0x60
 8003196:	d877      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 8003198:	2b50      	cmp	r3, #80	@ 0x50
 800319a:	d03c      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0xfa>
 800319c:	2b50      	cmp	r3, #80	@ 0x50
 800319e:	d873      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d058      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x13a>
 80031a4:	2b40      	cmp	r3, #64	@ 0x40
 80031a6:	d86f      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031a8:	2b30      	cmp	r3, #48	@ 0x30
 80031aa:	d064      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031ac:	2b30      	cmp	r3, #48	@ 0x30
 80031ae:	d86b      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d060      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d867      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05c      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d05a      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	e062      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031d2:	f000 f999 	bl	8003508 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	609a      	str	r2, [r3, #8]
      break;
 80031ee:	e04f      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003200:	f000 f982 	bl	8003508 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003212:	609a      	str	r2, [r3, #8]
      break;
 8003214:	e03c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	461a      	mov	r2, r3
 8003224:	f000 f8f6 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2150      	movs	r1, #80	@ 0x50
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f94f 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8003234:	e02c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	461a      	mov	r2, r3
 8003244:	f000 f915 	bl	8003472 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2160      	movs	r1, #96	@ 0x60
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f93f 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8003254:	e01c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	461a      	mov	r2, r3
 8003264:	f000 f8d6 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2140      	movs	r1, #64	@ 0x40
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f92f 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8003274:	e00c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f000 f926 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8003286:	e003      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
      break;
 800328c:	e000      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800328e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a3a      	ldr	r2, [pc, #232]	@ (80033f8 <TIM_Base_SetConfig+0xfc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00f      	beq.n	8003334 <TIM_Base_SetConfig+0x38>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331a:	d00b      	beq.n	8003334 <TIM_Base_SetConfig+0x38>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a37      	ldr	r2, [pc, #220]	@ (80033fc <TIM_Base_SetConfig+0x100>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <TIM_Base_SetConfig+0x38>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a36      	ldr	r2, [pc, #216]	@ (8003400 <TIM_Base_SetConfig+0x104>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_Base_SetConfig+0x38>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a35      	ldr	r2, [pc, #212]	@ (8003404 <TIM_Base_SetConfig+0x108>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d108      	bne.n	8003346 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800333a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2b      	ldr	r2, [pc, #172]	@ (80033f8 <TIM_Base_SetConfig+0xfc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01b      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003354:	d017      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a28      	ldr	r2, [pc, #160]	@ (80033fc <TIM_Base_SetConfig+0x100>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a27      	ldr	r2, [pc, #156]	@ (8003400 <TIM_Base_SetConfig+0x104>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00f      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a26      	ldr	r2, [pc, #152]	@ (8003404 <TIM_Base_SetConfig+0x108>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00b      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a25      	ldr	r2, [pc, #148]	@ (8003408 <TIM_Base_SetConfig+0x10c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a24      	ldr	r2, [pc, #144]	@ (800340c <TIM_Base_SetConfig+0x110>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a23      	ldr	r2, [pc, #140]	@ (8003410 <TIM_Base_SetConfig+0x114>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800338c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a0e      	ldr	r2, [pc, #56]	@ (80033f8 <TIM_Base_SetConfig+0xfc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d103      	bne.n	80033cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f023 0201 	bic.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	611a      	str	r2, [r3, #16]
  }
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800

08003414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800343e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 030a 	bic.w	r3, r3, #10
 8003450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003472:	b480      	push	{r7}
 8003474:	b087      	sub	sp, #28
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f023 0210 	bic.w	r2, r3, #16
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800349c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	031b      	lsls	r3, r3, #12
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f043 0307 	orr.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	431a      	orrs	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800355c:	2302      	movs	r3, #2
 800355e:	e050      	b.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	@ (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ac:	d013      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a15      	ldr	r2, [pc, #84]	@ (800361c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a13      	ldr	r2, [pc, #76]	@ (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10c      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40014000 	.word	0x40014000

08003624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e042      	b.n	80036e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fa34 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800368e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f9d1 	bl	8003a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	@ 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	d175      	bne.n	80037f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Transmit+0x2c>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e06e      	b.n	80037fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2221      	movs	r2, #33	@ 0x21
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372a:	f7fd fbc5 	bl	8000eb8 <HAL_GetTick>
 800372e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003744:	d108      	bne.n	8003758 <HAL_UART_Transmit+0x6c>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e003      	b.n	8003760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003760:	e02e      	b.n	80037c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2180      	movs	r1, #128	@ 0x80
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f86d 	bl	800384c <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e03a      	b.n	80037fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003798:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	3302      	adds	r3, #2
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	e007      	b.n	80037b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3301      	adds	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1cb      	bne.n	8003762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2140      	movs	r1, #64	@ 0x40
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f839 	bl	800384c <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e006      	b.n	80037fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	e000      	b.n	80037fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
  }
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	4613      	mov	r3, r2
 800380e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b20      	cmp	r3, #32
 800381a:	d112      	bne.n	8003842 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_UART_Receive_IT+0x26>
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e00b      	b.n	8003844 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	461a      	mov	r2, r3
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f860 	bl	80038fe <UART_Start_Receive_IT>
 800383e:	4603      	mov	r3, r0
 8003840:	e000      	b.n	8003844 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003842:	2302      	movs	r3, #2
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385c:	e03b      	b.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d037      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fd fb27 	bl	8000eb8 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <UART_WaitOnFlagUntilTimeout+0x30>
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e03a      	b.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d023      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b80      	cmp	r3, #128	@ 0x80
 8003892:	d020      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b40      	cmp	r3, #64	@ 0x40
 8003898:	d01d      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d116      	bne.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f857 	bl	8003972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2208      	movs	r2, #8
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4013      	ands	r3, r2
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d0b4      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	4613      	mov	r3, r2
 800390a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2222      	movs	r2, #34	@ 0x22
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003942:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003972:	b480      	push	{r7}
 8003974:	b095      	sub	sp, #84	@ 0x54
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003990:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800399a:	643a      	str	r2, [r7, #64]	@ 0x40
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e5      	bne.n	80039ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d119      	bne.n	8003a1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a0a:	61ba      	str	r2, [r7, #24]
 8003a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6979      	ldr	r1, [r7, #20]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	613b      	str	r3, [r7, #16]
   return(result);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a2c:	bf00      	nop
 8003a2e:	3754      	adds	r7, #84	@ 0x54
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b0c0      	sub	sp, #256	@ 0x100
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	68d9      	ldr	r1, [r3, #12]
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	ea40 0301 	orr.w	r3, r0, r1
 8003a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a90:	f021 010c 	bic.w	r1, r1, #12
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	6999      	ldr	r1, [r3, #24]
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	ea40 0301 	orr.w	r3, r0, r1
 8003abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b8f      	ldr	r3, [pc, #572]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0xa0>
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d08 <UART_SetConfig+0x2d0>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d104      	bne.n	8003ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7ff f96a 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 8003adc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ae0:	e003      	b.n	8003aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ae2:	f7ff f951 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003af4:	f040 810c 	bne.w	8003d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b12:	415b      	adcs	r3, r3
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	eb12 0801 	adds.w	r8, r2, r1
 8003b20:	4629      	mov	r1, r5
 8003b22:	eb43 0901 	adc.w	r9, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	4699      	mov	r9, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb18 0303 	adds.w	r3, r8, r3
 8003b44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b48:	462b      	mov	r3, r5
 8003b4a:	eb49 0303 	adc.w	r3, r9, r3
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b66:	460b      	mov	r3, r1
 8003b68:	18db      	adds	r3, r3, r3
 8003b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	eb42 0303 	adc.w	r3, r2, r3
 8003b72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b7c:	f7fc fb80 	bl	8000280 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b61      	ldr	r3, [pc, #388]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003b86:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	011c      	lsls	r4, r3, #4
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	1891      	adds	r1, r2, r2
 8003ba6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ba8:	415b      	adcs	r3, r3
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd0:	4692      	mov	sl, r2
 8003bd2:	469b      	mov	fp, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bde:	464b      	mov	r3, r9
 8003be0:	eb4b 0303 	adc.w	r3, fp, r3
 8003be4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	18db      	adds	r3, r3, r3
 8003c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c02:	4613      	mov	r3, r2
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c12:	f7fc fb35 	bl	8000280 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2264      	movs	r2, #100	@ 0x64
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	1acb      	subs	r3, r1, r3
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c32:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003c34:	fba3 2302 	umull	r2, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c40:	441c      	add	r4, r3
 8003c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c64:	4641      	mov	r1, r8
 8003c66:	1851      	adds	r1, r2, r1
 8003c68:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	00cb      	lsls	r3, r1, #3
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c86:	4651      	mov	r1, sl
 8003c88:	00ca      	lsls	r2, r1, #3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4642      	mov	r2, r8
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c98:	464b      	mov	r3, r9
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cb8:	460b      	mov	r3, r1
 8003cba:	18db      	adds	r3, r3, r3
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cce:	f7fc fad7 	bl	8000280 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	2164      	movs	r1, #100	@ 0x64
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	3332      	adds	r3, #50	@ 0x32
 8003cea:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	f003 0207 	and.w	r2, r3, #7
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4422      	add	r2, r4
 8003cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d00:	e106      	b.n	8003f10 <UART_SetConfig+0x4d8>
 8003d02:	bf00      	nop
 8003d04:	40011000 	.word	0x40011000
 8003d08:	40011400 	.word	0x40011400
 8003d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d22:	4642      	mov	r2, r8
 8003d24:	464b      	mov	r3, r9
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	6239      	str	r1, [r7, #32]
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d32:	4641      	mov	r1, r8
 8003d34:	1854      	adds	r4, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0501 	adc.w	r5, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	00eb      	lsls	r3, r5, #3
 8003d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4a:	00e2      	lsls	r2, r4, #3
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d58:	464b      	mov	r3, r9
 8003d5a:	eb45 0303 	adc.w	r3, r5, r3
 8003d5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d7e:	4629      	mov	r1, r5
 8003d80:	008b      	lsls	r3, r1, #2
 8003d82:	4621      	mov	r1, r4
 8003d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d88:	4621      	mov	r1, r4
 8003d8a:	008a      	lsls	r2, r1, #2
 8003d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d90:	f7fc fa76 	bl	8000280 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b60      	ldr	r3, [pc, #384]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	011c      	lsls	r4, r3, #4
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	1891      	adds	r1, r2, r2
 8003dba:	61b9      	str	r1, [r7, #24]
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	1851      	adds	r1, r2, r1
 8003dc8:	6139      	str	r1, [r7, #16]
 8003dca:	4649      	mov	r1, r9
 8003dcc:	414b      	adcs	r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	00cb      	lsls	r3, r1, #3
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de6:	4651      	mov	r1, sl
 8003de8:	00ca      	lsls	r2, r1, #3
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	4642      	mov	r2, r8
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003df8:	464b      	mov	r3, r9
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	eb42 0303 	adc.w	r3, r2, r3
 8003e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	008b      	lsls	r3, r1, #2
 8003e20:	4641      	mov	r1, r8
 8003e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e26:	4641      	mov	r1, r8
 8003e28:	008a      	lsls	r2, r1, #2
 8003e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e2e:	f7fc fa27 	bl	8000280 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	4b38      	ldr	r3, [pc, #224]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2264      	movs	r2, #100	@ 0x64
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	1acb      	subs	r3, r1, r3
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	3332      	adds	r3, #50	@ 0x32
 8003e4c:	4a33      	ldr	r2, [pc, #204]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e58:	441c      	add	r4, r3
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e62:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	415b      	adcs	r3, r3
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e78:	4641      	mov	r1, r8
 8003e7a:	1851      	adds	r1, r2, r1
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	4649      	mov	r1, r9
 8003e80:	414b      	adcs	r3, r1
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e90:	4659      	mov	r1, fp
 8003e92:	00cb      	lsls	r3, r1, #3
 8003e94:	4651      	mov	r1, sl
 8003e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	00ca      	lsls	r2, r1, #3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eaa:	464b      	mov	r3, r9
 8003eac:	460a      	mov	r2, r1
 8003eae:	eb42 0303 	adc.w	r3, r2, r3
 8003eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ebe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ecc:	4649      	mov	r1, r9
 8003ece:	008b      	lsls	r3, r1, #2
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	008a      	lsls	r2, r1, #2
 8003eda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ede:	f7fc f9cf 	bl	8000280 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2164      	movs	r1, #100	@ 0x64
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	3332      	adds	r3, #50	@ 0x32
 8003efa:	4a08      	ldr	r2, [pc, #32]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	f003 020f 	and.w	r2, r3, #15
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4422      	add	r2, r4
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f16:	46bd      	mov	sp, r7
 8003f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <std>:
 8003f20:	2300      	movs	r3, #0
 8003f22:	b510      	push	{r4, lr}
 8003f24:	4604      	mov	r4, r0
 8003f26:	e9c0 3300 	strd	r3, r3, [r0]
 8003f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f2e:	6083      	str	r3, [r0, #8]
 8003f30:	8181      	strh	r1, [r0, #12]
 8003f32:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f34:	81c2      	strh	r2, [r0, #14]
 8003f36:	6183      	str	r3, [r0, #24]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	305c      	adds	r0, #92	@ 0x5c
 8003f3e:	f000 f906 	bl	800414e <memset>
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <std+0x58>)
 8003f44:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f46:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <std+0x5c>)
 8003f48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <std+0x60>)
 8003f4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <std+0x64>)
 8003f50:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <std+0x68>)
 8003f54:	6224      	str	r4, [r4, #32]
 8003f56:	429c      	cmp	r4, r3
 8003f58:	d006      	beq.n	8003f68 <std+0x48>
 8003f5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f5e:	4294      	cmp	r4, r2
 8003f60:	d002      	beq.n	8003f68 <std+0x48>
 8003f62:	33d0      	adds	r3, #208	@ 0xd0
 8003f64:	429c      	cmp	r4, r3
 8003f66:	d105      	bne.n	8003f74 <std+0x54>
 8003f68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f70:	f000 b966 	b.w	8004240 <__retarget_lock_init_recursive>
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	bf00      	nop
 8003f78:	080040c9 	.word	0x080040c9
 8003f7c:	080040eb 	.word	0x080040eb
 8003f80:	08004123 	.word	0x08004123
 8003f84:	08004147 	.word	0x08004147
 8003f88:	200001d8 	.word	0x200001d8

08003f8c <stdio_exit_handler>:
 8003f8c:	4a02      	ldr	r2, [pc, #8]	@ (8003f98 <stdio_exit_handler+0xc>)
 8003f8e:	4903      	ldr	r1, [pc, #12]	@ (8003f9c <stdio_exit_handler+0x10>)
 8003f90:	4803      	ldr	r0, [pc, #12]	@ (8003fa0 <stdio_exit_handler+0x14>)
 8003f92:	f000 b869 	b.w	8004068 <_fwalk_sglue>
 8003f96:	bf00      	nop
 8003f98:	2000000c 	.word	0x2000000c
 8003f9c:	08004ae1 	.word	0x08004ae1
 8003fa0:	2000001c 	.word	0x2000001c

08003fa4 <cleanup_stdio>:
 8003fa4:	6841      	ldr	r1, [r0, #4]
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd8 <cleanup_stdio+0x34>)
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	b510      	push	{r4, lr}
 8003fac:	4604      	mov	r4, r0
 8003fae:	d001      	beq.n	8003fb4 <cleanup_stdio+0x10>
 8003fb0:	f000 fd96 	bl	8004ae0 <_fflush_r>
 8003fb4:	68a1      	ldr	r1, [r4, #8]
 8003fb6:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <cleanup_stdio+0x38>)
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	d002      	beq.n	8003fc2 <cleanup_stdio+0x1e>
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f000 fd8f 	bl	8004ae0 <_fflush_r>
 8003fc2:	68e1      	ldr	r1, [r4, #12]
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <cleanup_stdio+0x3c>)
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	d004      	beq.n	8003fd4 <cleanup_stdio+0x30>
 8003fca:	4620      	mov	r0, r4
 8003fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd0:	f000 bd86 	b.w	8004ae0 <_fflush_r>
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200001d8 	.word	0x200001d8
 8003fdc:	20000240 	.word	0x20000240
 8003fe0:	200002a8 	.word	0x200002a8

08003fe4 <global_stdio_init.part.0>:
 8003fe4:	b510      	push	{r4, lr}
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <global_stdio_init.part.0+0x30>)
 8003fe8:	4c0b      	ldr	r4, [pc, #44]	@ (8004018 <global_stdio_init.part.0+0x34>)
 8003fea:	4a0c      	ldr	r2, [pc, #48]	@ (800401c <global_stdio_init.part.0+0x38>)
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	4620      	mov	r0, r4
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2104      	movs	r1, #4
 8003ff4:	f7ff ff94 	bl	8003f20 <std>
 8003ff8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	2109      	movs	r1, #9
 8004000:	f7ff ff8e 	bl	8003f20 <std>
 8004004:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004008:	2202      	movs	r2, #2
 800400a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800400e:	2112      	movs	r1, #18
 8004010:	f7ff bf86 	b.w	8003f20 <std>
 8004014:	20000310 	.word	0x20000310
 8004018:	200001d8 	.word	0x200001d8
 800401c:	08003f8d 	.word	0x08003f8d

08004020 <__sfp_lock_acquire>:
 8004020:	4801      	ldr	r0, [pc, #4]	@ (8004028 <__sfp_lock_acquire+0x8>)
 8004022:	f000 b90e 	b.w	8004242 <__retarget_lock_acquire_recursive>
 8004026:	bf00      	nop
 8004028:	20000319 	.word	0x20000319

0800402c <__sfp_lock_release>:
 800402c:	4801      	ldr	r0, [pc, #4]	@ (8004034 <__sfp_lock_release+0x8>)
 800402e:	f000 b909 	b.w	8004244 <__retarget_lock_release_recursive>
 8004032:	bf00      	nop
 8004034:	20000319 	.word	0x20000319

08004038 <__sinit>:
 8004038:	b510      	push	{r4, lr}
 800403a:	4604      	mov	r4, r0
 800403c:	f7ff fff0 	bl	8004020 <__sfp_lock_acquire>
 8004040:	6a23      	ldr	r3, [r4, #32]
 8004042:	b11b      	cbz	r3, 800404c <__sinit+0x14>
 8004044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004048:	f7ff bff0 	b.w	800402c <__sfp_lock_release>
 800404c:	4b04      	ldr	r3, [pc, #16]	@ (8004060 <__sinit+0x28>)
 800404e:	6223      	str	r3, [r4, #32]
 8004050:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <__sinit+0x2c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f5      	bne.n	8004044 <__sinit+0xc>
 8004058:	f7ff ffc4 	bl	8003fe4 <global_stdio_init.part.0>
 800405c:	e7f2      	b.n	8004044 <__sinit+0xc>
 800405e:	bf00      	nop
 8004060:	08003fa5 	.word	0x08003fa5
 8004064:	20000310 	.word	0x20000310

08004068 <_fwalk_sglue>:
 8004068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800406c:	4607      	mov	r7, r0
 800406e:	4688      	mov	r8, r1
 8004070:	4614      	mov	r4, r2
 8004072:	2600      	movs	r6, #0
 8004074:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004078:	f1b9 0901 	subs.w	r9, r9, #1
 800407c:	d505      	bpl.n	800408a <_fwalk_sglue+0x22>
 800407e:	6824      	ldr	r4, [r4, #0]
 8004080:	2c00      	cmp	r4, #0
 8004082:	d1f7      	bne.n	8004074 <_fwalk_sglue+0xc>
 8004084:	4630      	mov	r0, r6
 8004086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408a:	89ab      	ldrh	r3, [r5, #12]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d907      	bls.n	80040a0 <_fwalk_sglue+0x38>
 8004090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004094:	3301      	adds	r3, #1
 8004096:	d003      	beq.n	80040a0 <_fwalk_sglue+0x38>
 8004098:	4629      	mov	r1, r5
 800409a:	4638      	mov	r0, r7
 800409c:	47c0      	blx	r8
 800409e:	4306      	orrs	r6, r0
 80040a0:	3568      	adds	r5, #104	@ 0x68
 80040a2:	e7e9      	b.n	8004078 <_fwalk_sglue+0x10>

080040a4 <iprintf>:
 80040a4:	b40f      	push	{r0, r1, r2, r3}
 80040a6:	b507      	push	{r0, r1, r2, lr}
 80040a8:	4906      	ldr	r1, [pc, #24]	@ (80040c4 <iprintf+0x20>)
 80040aa:	ab04      	add	r3, sp, #16
 80040ac:	6808      	ldr	r0, [r1, #0]
 80040ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80040b2:	6881      	ldr	r1, [r0, #8]
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	f000 f9e9 	bl	800448c <_vfiprintf_r>
 80040ba:	b003      	add	sp, #12
 80040bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80040c0:	b004      	add	sp, #16
 80040c2:	4770      	bx	lr
 80040c4:	20000018 	.word	0x20000018

080040c8 <__sread>:
 80040c8:	b510      	push	{r4, lr}
 80040ca:	460c      	mov	r4, r1
 80040cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d0:	f000 f868 	bl	80041a4 <_read_r>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	bfab      	itete	ge
 80040d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040da:	89a3      	ldrhlt	r3, [r4, #12]
 80040dc:	181b      	addge	r3, r3, r0
 80040de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040e2:	bfac      	ite	ge
 80040e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040e6:	81a3      	strhlt	r3, [r4, #12]
 80040e8:	bd10      	pop	{r4, pc}

080040ea <__swrite>:
 80040ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ee:	461f      	mov	r7, r3
 80040f0:	898b      	ldrh	r3, [r1, #12]
 80040f2:	05db      	lsls	r3, r3, #23
 80040f4:	4605      	mov	r5, r0
 80040f6:	460c      	mov	r4, r1
 80040f8:	4616      	mov	r6, r2
 80040fa:	d505      	bpl.n	8004108 <__swrite+0x1e>
 80040fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004100:	2302      	movs	r3, #2
 8004102:	2200      	movs	r2, #0
 8004104:	f000 f83c 	bl	8004180 <_lseek_r>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800410e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	4632      	mov	r2, r6
 8004116:	463b      	mov	r3, r7
 8004118:	4628      	mov	r0, r5
 800411a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800411e:	f000 b853 	b.w	80041c8 <_write_r>

08004122 <__sseek>:
 8004122:	b510      	push	{r4, lr}
 8004124:	460c      	mov	r4, r1
 8004126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800412a:	f000 f829 	bl	8004180 <_lseek_r>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	bf15      	itete	ne
 8004134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004136:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800413a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800413e:	81a3      	strheq	r3, [r4, #12]
 8004140:	bf18      	it	ne
 8004142:	81a3      	strhne	r3, [r4, #12]
 8004144:	bd10      	pop	{r4, pc}

08004146 <__sclose>:
 8004146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414a:	f000 b809 	b.w	8004160 <_close_r>

0800414e <memset>:
 800414e:	4402      	add	r2, r0
 8004150:	4603      	mov	r3, r0
 8004152:	4293      	cmp	r3, r2
 8004154:	d100      	bne.n	8004158 <memset+0xa>
 8004156:	4770      	bx	lr
 8004158:	f803 1b01 	strb.w	r1, [r3], #1
 800415c:	e7f9      	b.n	8004152 <memset+0x4>
	...

08004160 <_close_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d06      	ldr	r5, [pc, #24]	@ (800417c <_close_r+0x1c>)
 8004164:	2300      	movs	r3, #0
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f7fc fd6b 	bl	8000c46 <_close>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_close_r+0x1a>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_close_r+0x1a>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	20000314 	.word	0x20000314

08004180 <_lseek_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4d07      	ldr	r5, [pc, #28]	@ (80041a0 <_lseek_r+0x20>)
 8004184:	4604      	mov	r4, r0
 8004186:	4608      	mov	r0, r1
 8004188:	4611      	mov	r1, r2
 800418a:	2200      	movs	r2, #0
 800418c:	602a      	str	r2, [r5, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f7fc fd80 	bl	8000c94 <_lseek>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_lseek_r+0x1e>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_lseek_r+0x1e>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	20000314 	.word	0x20000314

080041a4 <_read_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4d07      	ldr	r5, [pc, #28]	@ (80041c4 <_read_r+0x20>)
 80041a8:	4604      	mov	r4, r0
 80041aa:	4608      	mov	r0, r1
 80041ac:	4611      	mov	r1, r2
 80041ae:	2200      	movs	r2, #0
 80041b0:	602a      	str	r2, [r5, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f7fc fd2a 	bl	8000c0c <_read>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_read_r+0x1e>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_read_r+0x1e>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	20000314 	.word	0x20000314

080041c8 <_write_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d07      	ldr	r5, [pc, #28]	@ (80041e8 <_write_r+0x20>)
 80041cc:	4604      	mov	r4, r0
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7fc fdb2 	bl	8000d40 <_write>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_write_r+0x1e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_write_r+0x1e>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	20000314 	.word	0x20000314

080041ec <__errno>:
 80041ec:	4b01      	ldr	r3, [pc, #4]	@ (80041f4 <__errno+0x8>)
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000018 	.word	0x20000018

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004230 <__libc_init_array+0x38>)
 80041fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004234 <__libc_init_array+0x3c>)
 80041fe:	1b64      	subs	r4, r4, r5
 8004200:	10a4      	asrs	r4, r4, #2
 8004202:	2600      	movs	r6, #0
 8004204:	42a6      	cmp	r6, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	4d0b      	ldr	r5, [pc, #44]	@ (8004238 <__libc_init_array+0x40>)
 800420a:	4c0c      	ldr	r4, [pc, #48]	@ (800423c <__libc_init_array+0x44>)
 800420c:	f000 fdb8 	bl	8004d80 <_init>
 8004210:	1b64      	subs	r4, r4, r5
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	2600      	movs	r6, #0
 8004216:	42a6      	cmp	r6, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004220:	4798      	blx	r3
 8004222:	3601      	adds	r6, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	f855 3b04 	ldr.w	r3, [r5], #4
 800422a:	4798      	blx	r3
 800422c:	3601      	adds	r6, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	08004dfc 	.word	0x08004dfc
 8004234:	08004dfc 	.word	0x08004dfc
 8004238:	08004dfc 	.word	0x08004dfc
 800423c:	08004e00 	.word	0x08004e00

08004240 <__retarget_lock_init_recursive>:
 8004240:	4770      	bx	lr

08004242 <__retarget_lock_acquire_recursive>:
 8004242:	4770      	bx	lr

08004244 <__retarget_lock_release_recursive>:
 8004244:	4770      	bx	lr
	...

08004248 <_free_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4605      	mov	r5, r0
 800424c:	2900      	cmp	r1, #0
 800424e:	d041      	beq.n	80042d4 <_free_r+0x8c>
 8004250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004254:	1f0c      	subs	r4, r1, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	bfb8      	it	lt
 800425a:	18e4      	addlt	r4, r4, r3
 800425c:	f000 f8e0 	bl	8004420 <__malloc_lock>
 8004260:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <_free_r+0x90>)
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	b933      	cbnz	r3, 8004274 <_free_r+0x2c>
 8004266:	6063      	str	r3, [r4, #4]
 8004268:	6014      	str	r4, [r2, #0]
 800426a:	4628      	mov	r0, r5
 800426c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004270:	f000 b8dc 	b.w	800442c <__malloc_unlock>
 8004274:	42a3      	cmp	r3, r4
 8004276:	d908      	bls.n	800428a <_free_r+0x42>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428b      	cmp	r3, r1
 800427e:	bf01      	itttt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	1809      	addeq	r1, r1, r0
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	e7ed      	b.n	8004266 <_free_r+0x1e>
 800428a:	461a      	mov	r2, r3
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b10b      	cbz	r3, 8004294 <_free_r+0x4c>
 8004290:	42a3      	cmp	r3, r4
 8004292:	d9fa      	bls.n	800428a <_free_r+0x42>
 8004294:	6811      	ldr	r1, [r2, #0]
 8004296:	1850      	adds	r0, r2, r1
 8004298:	42a0      	cmp	r0, r4
 800429a:	d10b      	bne.n	80042b4 <_free_r+0x6c>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	4401      	add	r1, r0
 80042a0:	1850      	adds	r0, r2, r1
 80042a2:	4283      	cmp	r3, r0
 80042a4:	6011      	str	r1, [r2, #0]
 80042a6:	d1e0      	bne.n	800426a <_free_r+0x22>
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	6053      	str	r3, [r2, #4]
 80042ae:	4408      	add	r0, r1
 80042b0:	6010      	str	r0, [r2, #0]
 80042b2:	e7da      	b.n	800426a <_free_r+0x22>
 80042b4:	d902      	bls.n	80042bc <_free_r+0x74>
 80042b6:	230c      	movs	r3, #12
 80042b8:	602b      	str	r3, [r5, #0]
 80042ba:	e7d6      	b.n	800426a <_free_r+0x22>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	1821      	adds	r1, r4, r0
 80042c0:	428b      	cmp	r3, r1
 80042c2:	bf04      	itt	eq
 80042c4:	6819      	ldreq	r1, [r3, #0]
 80042c6:	685b      	ldreq	r3, [r3, #4]
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	bf04      	itt	eq
 80042cc:	1809      	addeq	r1, r1, r0
 80042ce:	6021      	streq	r1, [r4, #0]
 80042d0:	6054      	str	r4, [r2, #4]
 80042d2:	e7ca      	b.n	800426a <_free_r+0x22>
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	bf00      	nop
 80042d8:	20000320 	.word	0x20000320

080042dc <sbrk_aligned>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4e0f      	ldr	r6, [pc, #60]	@ (800431c <sbrk_aligned+0x40>)
 80042e0:	460c      	mov	r4, r1
 80042e2:	6831      	ldr	r1, [r6, #0]
 80042e4:	4605      	mov	r5, r0
 80042e6:	b911      	cbnz	r1, 80042ee <sbrk_aligned+0x12>
 80042e8:	f000 fcb6 	bl	8004c58 <_sbrk_r>
 80042ec:	6030      	str	r0, [r6, #0]
 80042ee:	4621      	mov	r1, r4
 80042f0:	4628      	mov	r0, r5
 80042f2:	f000 fcb1 	bl	8004c58 <_sbrk_r>
 80042f6:	1c43      	adds	r3, r0, #1
 80042f8:	d103      	bne.n	8004302 <sbrk_aligned+0x26>
 80042fa:	f04f 34ff 	mov.w	r4, #4294967295
 80042fe:	4620      	mov	r0, r4
 8004300:	bd70      	pop	{r4, r5, r6, pc}
 8004302:	1cc4      	adds	r4, r0, #3
 8004304:	f024 0403 	bic.w	r4, r4, #3
 8004308:	42a0      	cmp	r0, r4
 800430a:	d0f8      	beq.n	80042fe <sbrk_aligned+0x22>
 800430c:	1a21      	subs	r1, r4, r0
 800430e:	4628      	mov	r0, r5
 8004310:	f000 fca2 	bl	8004c58 <_sbrk_r>
 8004314:	3001      	adds	r0, #1
 8004316:	d1f2      	bne.n	80042fe <sbrk_aligned+0x22>
 8004318:	e7ef      	b.n	80042fa <sbrk_aligned+0x1e>
 800431a:	bf00      	nop
 800431c:	2000031c 	.word	0x2000031c

08004320 <_malloc_r>:
 8004320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004324:	1ccd      	adds	r5, r1, #3
 8004326:	f025 0503 	bic.w	r5, r5, #3
 800432a:	3508      	adds	r5, #8
 800432c:	2d0c      	cmp	r5, #12
 800432e:	bf38      	it	cc
 8004330:	250c      	movcc	r5, #12
 8004332:	2d00      	cmp	r5, #0
 8004334:	4606      	mov	r6, r0
 8004336:	db01      	blt.n	800433c <_malloc_r+0x1c>
 8004338:	42a9      	cmp	r1, r5
 800433a:	d904      	bls.n	8004346 <_malloc_r+0x26>
 800433c:	230c      	movs	r3, #12
 800433e:	6033      	str	r3, [r6, #0]
 8004340:	2000      	movs	r0, #0
 8004342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800441c <_malloc_r+0xfc>
 800434a:	f000 f869 	bl	8004420 <__malloc_lock>
 800434e:	f8d8 3000 	ldr.w	r3, [r8]
 8004352:	461c      	mov	r4, r3
 8004354:	bb44      	cbnz	r4, 80043a8 <_malloc_r+0x88>
 8004356:	4629      	mov	r1, r5
 8004358:	4630      	mov	r0, r6
 800435a:	f7ff ffbf 	bl	80042dc <sbrk_aligned>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	4604      	mov	r4, r0
 8004362:	d158      	bne.n	8004416 <_malloc_r+0xf6>
 8004364:	f8d8 4000 	ldr.w	r4, [r8]
 8004368:	4627      	mov	r7, r4
 800436a:	2f00      	cmp	r7, #0
 800436c:	d143      	bne.n	80043f6 <_malloc_r+0xd6>
 800436e:	2c00      	cmp	r4, #0
 8004370:	d04b      	beq.n	800440a <_malloc_r+0xea>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	4639      	mov	r1, r7
 8004376:	4630      	mov	r0, r6
 8004378:	eb04 0903 	add.w	r9, r4, r3
 800437c:	f000 fc6c 	bl	8004c58 <_sbrk_r>
 8004380:	4581      	cmp	r9, r0
 8004382:	d142      	bne.n	800440a <_malloc_r+0xea>
 8004384:	6821      	ldr	r1, [r4, #0]
 8004386:	1a6d      	subs	r5, r5, r1
 8004388:	4629      	mov	r1, r5
 800438a:	4630      	mov	r0, r6
 800438c:	f7ff ffa6 	bl	80042dc <sbrk_aligned>
 8004390:	3001      	adds	r0, #1
 8004392:	d03a      	beq.n	800440a <_malloc_r+0xea>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	442b      	add	r3, r5
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	f8d8 3000 	ldr.w	r3, [r8]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	bb62      	cbnz	r2, 80043fc <_malloc_r+0xdc>
 80043a2:	f8c8 7000 	str.w	r7, [r8]
 80043a6:	e00f      	b.n	80043c8 <_malloc_r+0xa8>
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	1b52      	subs	r2, r2, r5
 80043ac:	d420      	bmi.n	80043f0 <_malloc_r+0xd0>
 80043ae:	2a0b      	cmp	r2, #11
 80043b0:	d917      	bls.n	80043e2 <_malloc_r+0xc2>
 80043b2:	1961      	adds	r1, r4, r5
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	6059      	strne	r1, [r3, #4]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	bf08      	it	eq
 80043c0:	f8c8 1000 	streq.w	r1, [r8]
 80043c4:	5162      	str	r2, [r4, r5]
 80043c6:	604b      	str	r3, [r1, #4]
 80043c8:	4630      	mov	r0, r6
 80043ca:	f000 f82f 	bl	800442c <__malloc_unlock>
 80043ce:	f104 000b 	add.w	r0, r4, #11
 80043d2:	1d23      	adds	r3, r4, #4
 80043d4:	f020 0007 	bic.w	r0, r0, #7
 80043d8:	1ac2      	subs	r2, r0, r3
 80043da:	bf1c      	itt	ne
 80043dc:	1a1b      	subne	r3, r3, r0
 80043de:	50a3      	strne	r3, [r4, r2]
 80043e0:	e7af      	b.n	8004342 <_malloc_r+0x22>
 80043e2:	6862      	ldr	r2, [r4, #4]
 80043e4:	42a3      	cmp	r3, r4
 80043e6:	bf0c      	ite	eq
 80043e8:	f8c8 2000 	streq.w	r2, [r8]
 80043ec:	605a      	strne	r2, [r3, #4]
 80043ee:	e7eb      	b.n	80043c8 <_malloc_r+0xa8>
 80043f0:	4623      	mov	r3, r4
 80043f2:	6864      	ldr	r4, [r4, #4]
 80043f4:	e7ae      	b.n	8004354 <_malloc_r+0x34>
 80043f6:	463c      	mov	r4, r7
 80043f8:	687f      	ldr	r7, [r7, #4]
 80043fa:	e7b6      	b.n	800436a <_malloc_r+0x4a>
 80043fc:	461a      	mov	r2, r3
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	42a3      	cmp	r3, r4
 8004402:	d1fb      	bne.n	80043fc <_malloc_r+0xdc>
 8004404:	2300      	movs	r3, #0
 8004406:	6053      	str	r3, [r2, #4]
 8004408:	e7de      	b.n	80043c8 <_malloc_r+0xa8>
 800440a:	230c      	movs	r3, #12
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	4630      	mov	r0, r6
 8004410:	f000 f80c 	bl	800442c <__malloc_unlock>
 8004414:	e794      	b.n	8004340 <_malloc_r+0x20>
 8004416:	6005      	str	r5, [r0, #0]
 8004418:	e7d6      	b.n	80043c8 <_malloc_r+0xa8>
 800441a:	bf00      	nop
 800441c:	20000320 	.word	0x20000320

08004420 <__malloc_lock>:
 8004420:	4801      	ldr	r0, [pc, #4]	@ (8004428 <__malloc_lock+0x8>)
 8004422:	f7ff bf0e 	b.w	8004242 <__retarget_lock_acquire_recursive>
 8004426:	bf00      	nop
 8004428:	20000318 	.word	0x20000318

0800442c <__malloc_unlock>:
 800442c:	4801      	ldr	r0, [pc, #4]	@ (8004434 <__malloc_unlock+0x8>)
 800442e:	f7ff bf09 	b.w	8004244 <__retarget_lock_release_recursive>
 8004432:	bf00      	nop
 8004434:	20000318 	.word	0x20000318

08004438 <__sfputc_r>:
 8004438:	6893      	ldr	r3, [r2, #8]
 800443a:	3b01      	subs	r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	b410      	push	{r4}
 8004440:	6093      	str	r3, [r2, #8]
 8004442:	da08      	bge.n	8004456 <__sfputc_r+0x1e>
 8004444:	6994      	ldr	r4, [r2, #24]
 8004446:	42a3      	cmp	r3, r4
 8004448:	db01      	blt.n	800444e <__sfputc_r+0x16>
 800444a:	290a      	cmp	r1, #10
 800444c:	d103      	bne.n	8004456 <__sfputc_r+0x1e>
 800444e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004452:	f000 bb6d 	b.w	8004b30 <__swbuf_r>
 8004456:	6813      	ldr	r3, [r2, #0]
 8004458:	1c58      	adds	r0, r3, #1
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	7019      	strb	r1, [r3, #0]
 800445e:	4608      	mov	r0, r1
 8004460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004464:	4770      	bx	lr

08004466 <__sfputs_r>:
 8004466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004468:	4606      	mov	r6, r0
 800446a:	460f      	mov	r7, r1
 800446c:	4614      	mov	r4, r2
 800446e:	18d5      	adds	r5, r2, r3
 8004470:	42ac      	cmp	r4, r5
 8004472:	d101      	bne.n	8004478 <__sfputs_r+0x12>
 8004474:	2000      	movs	r0, #0
 8004476:	e007      	b.n	8004488 <__sfputs_r+0x22>
 8004478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800447c:	463a      	mov	r2, r7
 800447e:	4630      	mov	r0, r6
 8004480:	f7ff ffda 	bl	8004438 <__sfputc_r>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d1f3      	bne.n	8004470 <__sfputs_r+0xa>
 8004488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800448c <_vfiprintf_r>:
 800448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004490:	460d      	mov	r5, r1
 8004492:	b09d      	sub	sp, #116	@ 0x74
 8004494:	4614      	mov	r4, r2
 8004496:	4698      	mov	r8, r3
 8004498:	4606      	mov	r6, r0
 800449a:	b118      	cbz	r0, 80044a4 <_vfiprintf_r+0x18>
 800449c:	6a03      	ldr	r3, [r0, #32]
 800449e:	b90b      	cbnz	r3, 80044a4 <_vfiprintf_r+0x18>
 80044a0:	f7ff fdca 	bl	8004038 <__sinit>
 80044a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044a6:	07d9      	lsls	r1, r3, #31
 80044a8:	d405      	bmi.n	80044b6 <_vfiprintf_r+0x2a>
 80044aa:	89ab      	ldrh	r3, [r5, #12]
 80044ac:	059a      	lsls	r2, r3, #22
 80044ae:	d402      	bmi.n	80044b6 <_vfiprintf_r+0x2a>
 80044b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044b2:	f7ff fec6 	bl	8004242 <__retarget_lock_acquire_recursive>
 80044b6:	89ab      	ldrh	r3, [r5, #12]
 80044b8:	071b      	lsls	r3, r3, #28
 80044ba:	d501      	bpl.n	80044c0 <_vfiprintf_r+0x34>
 80044bc:	692b      	ldr	r3, [r5, #16]
 80044be:	b99b      	cbnz	r3, 80044e8 <_vfiprintf_r+0x5c>
 80044c0:	4629      	mov	r1, r5
 80044c2:	4630      	mov	r0, r6
 80044c4:	f000 fb72 	bl	8004bac <__swsetup_r>
 80044c8:	b170      	cbz	r0, 80044e8 <_vfiprintf_r+0x5c>
 80044ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044cc:	07dc      	lsls	r4, r3, #31
 80044ce:	d504      	bpl.n	80044da <_vfiprintf_r+0x4e>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	b01d      	add	sp, #116	@ 0x74
 80044d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	0598      	lsls	r0, r3, #22
 80044de:	d4f7      	bmi.n	80044d0 <_vfiprintf_r+0x44>
 80044e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044e2:	f7ff feaf 	bl	8004244 <__retarget_lock_release_recursive>
 80044e6:	e7f3      	b.n	80044d0 <_vfiprintf_r+0x44>
 80044e8:	2300      	movs	r3, #0
 80044ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ec:	2320      	movs	r3, #32
 80044ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f6:	2330      	movs	r3, #48	@ 0x30
 80044f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046a8 <_vfiprintf_r+0x21c>
 80044fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004500:	f04f 0901 	mov.w	r9, #1
 8004504:	4623      	mov	r3, r4
 8004506:	469a      	mov	sl, r3
 8004508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800450c:	b10a      	cbz	r2, 8004512 <_vfiprintf_r+0x86>
 800450e:	2a25      	cmp	r2, #37	@ 0x25
 8004510:	d1f9      	bne.n	8004506 <_vfiprintf_r+0x7a>
 8004512:	ebba 0b04 	subs.w	fp, sl, r4
 8004516:	d00b      	beq.n	8004530 <_vfiprintf_r+0xa4>
 8004518:	465b      	mov	r3, fp
 800451a:	4622      	mov	r2, r4
 800451c:	4629      	mov	r1, r5
 800451e:	4630      	mov	r0, r6
 8004520:	f7ff ffa1 	bl	8004466 <__sfputs_r>
 8004524:	3001      	adds	r0, #1
 8004526:	f000 80a7 	beq.w	8004678 <_vfiprintf_r+0x1ec>
 800452a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800452c:	445a      	add	r2, fp
 800452e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004530:	f89a 3000 	ldrb.w	r3, [sl]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 809f 	beq.w	8004678 <_vfiprintf_r+0x1ec>
 800453a:	2300      	movs	r3, #0
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004544:	f10a 0a01 	add.w	sl, sl, #1
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	9307      	str	r3, [sp, #28]
 800454c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004550:	931a      	str	r3, [sp, #104]	@ 0x68
 8004552:	4654      	mov	r4, sl
 8004554:	2205      	movs	r2, #5
 8004556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455a:	4853      	ldr	r0, [pc, #332]	@ (80046a8 <_vfiprintf_r+0x21c>)
 800455c:	f7fb fe40 	bl	80001e0 <memchr>
 8004560:	9a04      	ldr	r2, [sp, #16]
 8004562:	b9d8      	cbnz	r0, 800459c <_vfiprintf_r+0x110>
 8004564:	06d1      	lsls	r1, r2, #27
 8004566:	bf44      	itt	mi
 8004568:	2320      	movmi	r3, #32
 800456a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800456e:	0713      	lsls	r3, r2, #28
 8004570:	bf44      	itt	mi
 8004572:	232b      	movmi	r3, #43	@ 0x2b
 8004574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004578:	f89a 3000 	ldrb.w	r3, [sl]
 800457c:	2b2a      	cmp	r3, #42	@ 0x2a
 800457e:	d015      	beq.n	80045ac <_vfiprintf_r+0x120>
 8004580:	9a07      	ldr	r2, [sp, #28]
 8004582:	4654      	mov	r4, sl
 8004584:	2000      	movs	r0, #0
 8004586:	f04f 0c0a 	mov.w	ip, #10
 800458a:	4621      	mov	r1, r4
 800458c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004590:	3b30      	subs	r3, #48	@ 0x30
 8004592:	2b09      	cmp	r3, #9
 8004594:	d94b      	bls.n	800462e <_vfiprintf_r+0x1a2>
 8004596:	b1b0      	cbz	r0, 80045c6 <_vfiprintf_r+0x13a>
 8004598:	9207      	str	r2, [sp, #28]
 800459a:	e014      	b.n	80045c6 <_vfiprintf_r+0x13a>
 800459c:	eba0 0308 	sub.w	r3, r0, r8
 80045a0:	fa09 f303 	lsl.w	r3, r9, r3
 80045a4:	4313      	orrs	r3, r2
 80045a6:	9304      	str	r3, [sp, #16]
 80045a8:	46a2      	mov	sl, r4
 80045aa:	e7d2      	b.n	8004552 <_vfiprintf_r+0xc6>
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	1d19      	adds	r1, r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	9103      	str	r1, [sp, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bfbb      	ittet	lt
 80045b8:	425b      	neglt	r3, r3
 80045ba:	f042 0202 	orrlt.w	r2, r2, #2
 80045be:	9307      	strge	r3, [sp, #28]
 80045c0:	9307      	strlt	r3, [sp, #28]
 80045c2:	bfb8      	it	lt
 80045c4:	9204      	strlt	r2, [sp, #16]
 80045c6:	7823      	ldrb	r3, [r4, #0]
 80045c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80045ca:	d10a      	bne.n	80045e2 <_vfiprintf_r+0x156>
 80045cc:	7863      	ldrb	r3, [r4, #1]
 80045ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80045d0:	d132      	bne.n	8004638 <_vfiprintf_r+0x1ac>
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	9203      	str	r2, [sp, #12]
 80045da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045de:	3402      	adds	r4, #2
 80045e0:	9305      	str	r3, [sp, #20]
 80045e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046b8 <_vfiprintf_r+0x22c>
 80045e6:	7821      	ldrb	r1, [r4, #0]
 80045e8:	2203      	movs	r2, #3
 80045ea:	4650      	mov	r0, sl
 80045ec:	f7fb fdf8 	bl	80001e0 <memchr>
 80045f0:	b138      	cbz	r0, 8004602 <_vfiprintf_r+0x176>
 80045f2:	9b04      	ldr	r3, [sp, #16]
 80045f4:	eba0 000a 	sub.w	r0, r0, sl
 80045f8:	2240      	movs	r2, #64	@ 0x40
 80045fa:	4082      	lsls	r2, r0
 80045fc:	4313      	orrs	r3, r2
 80045fe:	3401      	adds	r4, #1
 8004600:	9304      	str	r3, [sp, #16]
 8004602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004606:	4829      	ldr	r0, [pc, #164]	@ (80046ac <_vfiprintf_r+0x220>)
 8004608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800460c:	2206      	movs	r2, #6
 800460e:	f7fb fde7 	bl	80001e0 <memchr>
 8004612:	2800      	cmp	r0, #0
 8004614:	d03f      	beq.n	8004696 <_vfiprintf_r+0x20a>
 8004616:	4b26      	ldr	r3, [pc, #152]	@ (80046b0 <_vfiprintf_r+0x224>)
 8004618:	bb1b      	cbnz	r3, 8004662 <_vfiprintf_r+0x1d6>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	3307      	adds	r3, #7
 800461e:	f023 0307 	bic.w	r3, r3, #7
 8004622:	3308      	adds	r3, #8
 8004624:	9303      	str	r3, [sp, #12]
 8004626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004628:	443b      	add	r3, r7
 800462a:	9309      	str	r3, [sp, #36]	@ 0x24
 800462c:	e76a      	b.n	8004504 <_vfiprintf_r+0x78>
 800462e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004632:	460c      	mov	r4, r1
 8004634:	2001      	movs	r0, #1
 8004636:	e7a8      	b.n	800458a <_vfiprintf_r+0xfe>
 8004638:	2300      	movs	r3, #0
 800463a:	3401      	adds	r4, #1
 800463c:	9305      	str	r3, [sp, #20]
 800463e:	4619      	mov	r1, r3
 8004640:	f04f 0c0a 	mov.w	ip, #10
 8004644:	4620      	mov	r0, r4
 8004646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800464a:	3a30      	subs	r2, #48	@ 0x30
 800464c:	2a09      	cmp	r2, #9
 800464e:	d903      	bls.n	8004658 <_vfiprintf_r+0x1cc>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0c6      	beq.n	80045e2 <_vfiprintf_r+0x156>
 8004654:	9105      	str	r1, [sp, #20]
 8004656:	e7c4      	b.n	80045e2 <_vfiprintf_r+0x156>
 8004658:	fb0c 2101 	mla	r1, ip, r1, r2
 800465c:	4604      	mov	r4, r0
 800465e:	2301      	movs	r3, #1
 8004660:	e7f0      	b.n	8004644 <_vfiprintf_r+0x1b8>
 8004662:	ab03      	add	r3, sp, #12
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	462a      	mov	r2, r5
 8004668:	4b12      	ldr	r3, [pc, #72]	@ (80046b4 <_vfiprintf_r+0x228>)
 800466a:	a904      	add	r1, sp, #16
 800466c:	4630      	mov	r0, r6
 800466e:	f3af 8000 	nop.w
 8004672:	4607      	mov	r7, r0
 8004674:	1c78      	adds	r0, r7, #1
 8004676:	d1d6      	bne.n	8004626 <_vfiprintf_r+0x19a>
 8004678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800467a:	07d9      	lsls	r1, r3, #31
 800467c:	d405      	bmi.n	800468a <_vfiprintf_r+0x1fe>
 800467e:	89ab      	ldrh	r3, [r5, #12]
 8004680:	059a      	lsls	r2, r3, #22
 8004682:	d402      	bmi.n	800468a <_vfiprintf_r+0x1fe>
 8004684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004686:	f7ff fddd 	bl	8004244 <__retarget_lock_release_recursive>
 800468a:	89ab      	ldrh	r3, [r5, #12]
 800468c:	065b      	lsls	r3, r3, #25
 800468e:	f53f af1f 	bmi.w	80044d0 <_vfiprintf_r+0x44>
 8004692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004694:	e71e      	b.n	80044d4 <_vfiprintf_r+0x48>
 8004696:	ab03      	add	r3, sp, #12
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	462a      	mov	r2, r5
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <_vfiprintf_r+0x228>)
 800469e:	a904      	add	r1, sp, #16
 80046a0:	4630      	mov	r0, r6
 80046a2:	f000 f879 	bl	8004798 <_printf_i>
 80046a6:	e7e4      	b.n	8004672 <_vfiprintf_r+0x1e6>
 80046a8:	08004dc0 	.word	0x08004dc0
 80046ac:	08004dca 	.word	0x08004dca
 80046b0:	00000000 	.word	0x00000000
 80046b4:	08004467 	.word	0x08004467
 80046b8:	08004dc6 	.word	0x08004dc6

080046bc <_printf_common>:
 80046bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c0:	4616      	mov	r6, r2
 80046c2:	4698      	mov	r8, r3
 80046c4:	688a      	ldr	r2, [r1, #8]
 80046c6:	690b      	ldr	r3, [r1, #16]
 80046c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046cc:	4293      	cmp	r3, r2
 80046ce:	bfb8      	it	lt
 80046d0:	4613      	movlt	r3, r2
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046d8:	4607      	mov	r7, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	b10a      	cbz	r2, 80046e2 <_printf_common+0x26>
 80046de:	3301      	adds	r3, #1
 80046e0:	6033      	str	r3, [r6, #0]
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	0699      	lsls	r1, r3, #26
 80046e6:	bf42      	ittt	mi
 80046e8:	6833      	ldrmi	r3, [r6, #0]
 80046ea:	3302      	addmi	r3, #2
 80046ec:	6033      	strmi	r3, [r6, #0]
 80046ee:	6825      	ldr	r5, [r4, #0]
 80046f0:	f015 0506 	ands.w	r5, r5, #6
 80046f4:	d106      	bne.n	8004704 <_printf_common+0x48>
 80046f6:	f104 0a19 	add.w	sl, r4, #25
 80046fa:	68e3      	ldr	r3, [r4, #12]
 80046fc:	6832      	ldr	r2, [r6, #0]
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	42ab      	cmp	r3, r5
 8004702:	dc26      	bgt.n	8004752 <_printf_common+0x96>
 8004704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	3b00      	subs	r3, #0
 800470c:	bf18      	it	ne
 800470e:	2301      	movne	r3, #1
 8004710:	0692      	lsls	r2, r2, #26
 8004712:	d42b      	bmi.n	800476c <_printf_common+0xb0>
 8004714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004718:	4641      	mov	r1, r8
 800471a:	4638      	mov	r0, r7
 800471c:	47c8      	blx	r9
 800471e:	3001      	adds	r0, #1
 8004720:	d01e      	beq.n	8004760 <_printf_common+0xa4>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	6922      	ldr	r2, [r4, #16]
 8004726:	f003 0306 	and.w	r3, r3, #6
 800472a:	2b04      	cmp	r3, #4
 800472c:	bf02      	ittt	eq
 800472e:	68e5      	ldreq	r5, [r4, #12]
 8004730:	6833      	ldreq	r3, [r6, #0]
 8004732:	1aed      	subeq	r5, r5, r3
 8004734:	68a3      	ldr	r3, [r4, #8]
 8004736:	bf0c      	ite	eq
 8004738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800473c:	2500      	movne	r5, #0
 800473e:	4293      	cmp	r3, r2
 8004740:	bfc4      	itt	gt
 8004742:	1a9b      	subgt	r3, r3, r2
 8004744:	18ed      	addgt	r5, r5, r3
 8004746:	2600      	movs	r6, #0
 8004748:	341a      	adds	r4, #26
 800474a:	42b5      	cmp	r5, r6
 800474c:	d11a      	bne.n	8004784 <_printf_common+0xc8>
 800474e:	2000      	movs	r0, #0
 8004750:	e008      	b.n	8004764 <_printf_common+0xa8>
 8004752:	2301      	movs	r3, #1
 8004754:	4652      	mov	r2, sl
 8004756:	4641      	mov	r1, r8
 8004758:	4638      	mov	r0, r7
 800475a:	47c8      	blx	r9
 800475c:	3001      	adds	r0, #1
 800475e:	d103      	bne.n	8004768 <_printf_common+0xac>
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004768:	3501      	adds	r5, #1
 800476a:	e7c6      	b.n	80046fa <_printf_common+0x3e>
 800476c:	18e1      	adds	r1, r4, r3
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	2030      	movs	r0, #48	@ 0x30
 8004772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004776:	4422      	add	r2, r4
 8004778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800477c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004780:	3302      	adds	r3, #2
 8004782:	e7c7      	b.n	8004714 <_printf_common+0x58>
 8004784:	2301      	movs	r3, #1
 8004786:	4622      	mov	r2, r4
 8004788:	4641      	mov	r1, r8
 800478a:	4638      	mov	r0, r7
 800478c:	47c8      	blx	r9
 800478e:	3001      	adds	r0, #1
 8004790:	d0e6      	beq.n	8004760 <_printf_common+0xa4>
 8004792:	3601      	adds	r6, #1
 8004794:	e7d9      	b.n	800474a <_printf_common+0x8e>
	...

08004798 <_printf_i>:
 8004798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800479c:	7e0f      	ldrb	r7, [r1, #24]
 800479e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a0:	2f78      	cmp	r7, #120	@ 0x78
 80047a2:	4691      	mov	r9, r2
 80047a4:	4680      	mov	r8, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	469a      	mov	sl, r3
 80047aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047ae:	d807      	bhi.n	80047c0 <_printf_i+0x28>
 80047b0:	2f62      	cmp	r7, #98	@ 0x62
 80047b2:	d80a      	bhi.n	80047ca <_printf_i+0x32>
 80047b4:	2f00      	cmp	r7, #0
 80047b6:	f000 80d2 	beq.w	800495e <_printf_i+0x1c6>
 80047ba:	2f58      	cmp	r7, #88	@ 0x58
 80047bc:	f000 80b9 	beq.w	8004932 <_printf_i+0x19a>
 80047c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047c8:	e03a      	b.n	8004840 <_printf_i+0xa8>
 80047ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047ce:	2b15      	cmp	r3, #21
 80047d0:	d8f6      	bhi.n	80047c0 <_printf_i+0x28>
 80047d2:	a101      	add	r1, pc, #4	@ (adr r1, 80047d8 <_printf_i+0x40>)
 80047d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047d8:	08004831 	.word	0x08004831
 80047dc:	08004845 	.word	0x08004845
 80047e0:	080047c1 	.word	0x080047c1
 80047e4:	080047c1 	.word	0x080047c1
 80047e8:	080047c1 	.word	0x080047c1
 80047ec:	080047c1 	.word	0x080047c1
 80047f0:	08004845 	.word	0x08004845
 80047f4:	080047c1 	.word	0x080047c1
 80047f8:	080047c1 	.word	0x080047c1
 80047fc:	080047c1 	.word	0x080047c1
 8004800:	080047c1 	.word	0x080047c1
 8004804:	08004945 	.word	0x08004945
 8004808:	0800486f 	.word	0x0800486f
 800480c:	080048ff 	.word	0x080048ff
 8004810:	080047c1 	.word	0x080047c1
 8004814:	080047c1 	.word	0x080047c1
 8004818:	08004967 	.word	0x08004967
 800481c:	080047c1 	.word	0x080047c1
 8004820:	0800486f 	.word	0x0800486f
 8004824:	080047c1 	.word	0x080047c1
 8004828:	080047c1 	.word	0x080047c1
 800482c:	08004907 	.word	0x08004907
 8004830:	6833      	ldr	r3, [r6, #0]
 8004832:	1d1a      	adds	r2, r3, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6032      	str	r2, [r6, #0]
 8004838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800483c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004840:	2301      	movs	r3, #1
 8004842:	e09d      	b.n	8004980 <_printf_i+0x1e8>
 8004844:	6833      	ldr	r3, [r6, #0]
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	1d19      	adds	r1, r3, #4
 800484a:	6031      	str	r1, [r6, #0]
 800484c:	0606      	lsls	r6, r0, #24
 800484e:	d501      	bpl.n	8004854 <_printf_i+0xbc>
 8004850:	681d      	ldr	r5, [r3, #0]
 8004852:	e003      	b.n	800485c <_printf_i+0xc4>
 8004854:	0645      	lsls	r5, r0, #25
 8004856:	d5fb      	bpl.n	8004850 <_printf_i+0xb8>
 8004858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800485c:	2d00      	cmp	r5, #0
 800485e:	da03      	bge.n	8004868 <_printf_i+0xd0>
 8004860:	232d      	movs	r3, #45	@ 0x2d
 8004862:	426d      	negs	r5, r5
 8004864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004868:	4859      	ldr	r0, [pc, #356]	@ (80049d0 <_printf_i+0x238>)
 800486a:	230a      	movs	r3, #10
 800486c:	e011      	b.n	8004892 <_printf_i+0xfa>
 800486e:	6821      	ldr	r1, [r4, #0]
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	0608      	lsls	r0, r1, #24
 8004874:	f853 5b04 	ldr.w	r5, [r3], #4
 8004878:	d402      	bmi.n	8004880 <_printf_i+0xe8>
 800487a:	0649      	lsls	r1, r1, #25
 800487c:	bf48      	it	mi
 800487e:	b2ad      	uxthmi	r5, r5
 8004880:	2f6f      	cmp	r7, #111	@ 0x6f
 8004882:	4853      	ldr	r0, [pc, #332]	@ (80049d0 <_printf_i+0x238>)
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	bf14      	ite	ne
 8004888:	230a      	movne	r3, #10
 800488a:	2308      	moveq	r3, #8
 800488c:	2100      	movs	r1, #0
 800488e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004892:	6866      	ldr	r6, [r4, #4]
 8004894:	60a6      	str	r6, [r4, #8]
 8004896:	2e00      	cmp	r6, #0
 8004898:	bfa2      	ittt	ge
 800489a:	6821      	ldrge	r1, [r4, #0]
 800489c:	f021 0104 	bicge.w	r1, r1, #4
 80048a0:	6021      	strge	r1, [r4, #0]
 80048a2:	b90d      	cbnz	r5, 80048a8 <_printf_i+0x110>
 80048a4:	2e00      	cmp	r6, #0
 80048a6:	d04b      	beq.n	8004940 <_printf_i+0x1a8>
 80048a8:	4616      	mov	r6, r2
 80048aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80048ae:	fb03 5711 	mls	r7, r3, r1, r5
 80048b2:	5dc7      	ldrb	r7, [r0, r7]
 80048b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048b8:	462f      	mov	r7, r5
 80048ba:	42bb      	cmp	r3, r7
 80048bc:	460d      	mov	r5, r1
 80048be:	d9f4      	bls.n	80048aa <_printf_i+0x112>
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d10b      	bne.n	80048dc <_printf_i+0x144>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	07df      	lsls	r7, r3, #31
 80048c8:	d508      	bpl.n	80048dc <_printf_i+0x144>
 80048ca:	6923      	ldr	r3, [r4, #16]
 80048cc:	6861      	ldr	r1, [r4, #4]
 80048ce:	4299      	cmp	r1, r3
 80048d0:	bfde      	ittt	le
 80048d2:	2330      	movle	r3, #48	@ 0x30
 80048d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048dc:	1b92      	subs	r2, r2, r6
 80048de:	6122      	str	r2, [r4, #16]
 80048e0:	f8cd a000 	str.w	sl, [sp]
 80048e4:	464b      	mov	r3, r9
 80048e6:	aa03      	add	r2, sp, #12
 80048e8:	4621      	mov	r1, r4
 80048ea:	4640      	mov	r0, r8
 80048ec:	f7ff fee6 	bl	80046bc <_printf_common>
 80048f0:	3001      	adds	r0, #1
 80048f2:	d14a      	bne.n	800498a <_printf_i+0x1f2>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	b004      	add	sp, #16
 80048fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	4833      	ldr	r0, [pc, #204]	@ (80049d4 <_printf_i+0x23c>)
 8004908:	2778      	movs	r7, #120	@ 0x78
 800490a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	6831      	ldr	r1, [r6, #0]
 8004912:	061f      	lsls	r7, r3, #24
 8004914:	f851 5b04 	ldr.w	r5, [r1], #4
 8004918:	d402      	bmi.n	8004920 <_printf_i+0x188>
 800491a:	065f      	lsls	r7, r3, #25
 800491c:	bf48      	it	mi
 800491e:	b2ad      	uxthmi	r5, r5
 8004920:	6031      	str	r1, [r6, #0]
 8004922:	07d9      	lsls	r1, r3, #31
 8004924:	bf44      	itt	mi
 8004926:	f043 0320 	orrmi.w	r3, r3, #32
 800492a:	6023      	strmi	r3, [r4, #0]
 800492c:	b11d      	cbz	r5, 8004936 <_printf_i+0x19e>
 800492e:	2310      	movs	r3, #16
 8004930:	e7ac      	b.n	800488c <_printf_i+0xf4>
 8004932:	4827      	ldr	r0, [pc, #156]	@ (80049d0 <_printf_i+0x238>)
 8004934:	e7e9      	b.n	800490a <_printf_i+0x172>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	f023 0320 	bic.w	r3, r3, #32
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	e7f6      	b.n	800492e <_printf_i+0x196>
 8004940:	4616      	mov	r6, r2
 8004942:	e7bd      	b.n	80048c0 <_printf_i+0x128>
 8004944:	6833      	ldr	r3, [r6, #0]
 8004946:	6825      	ldr	r5, [r4, #0]
 8004948:	6961      	ldr	r1, [r4, #20]
 800494a:	1d18      	adds	r0, r3, #4
 800494c:	6030      	str	r0, [r6, #0]
 800494e:	062e      	lsls	r6, r5, #24
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	d501      	bpl.n	8004958 <_printf_i+0x1c0>
 8004954:	6019      	str	r1, [r3, #0]
 8004956:	e002      	b.n	800495e <_printf_i+0x1c6>
 8004958:	0668      	lsls	r0, r5, #25
 800495a:	d5fb      	bpl.n	8004954 <_printf_i+0x1bc>
 800495c:	8019      	strh	r1, [r3, #0]
 800495e:	2300      	movs	r3, #0
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	4616      	mov	r6, r2
 8004964:	e7bc      	b.n	80048e0 <_printf_i+0x148>
 8004966:	6833      	ldr	r3, [r6, #0]
 8004968:	1d1a      	adds	r2, r3, #4
 800496a:	6032      	str	r2, [r6, #0]
 800496c:	681e      	ldr	r6, [r3, #0]
 800496e:	6862      	ldr	r2, [r4, #4]
 8004970:	2100      	movs	r1, #0
 8004972:	4630      	mov	r0, r6
 8004974:	f7fb fc34 	bl	80001e0 <memchr>
 8004978:	b108      	cbz	r0, 800497e <_printf_i+0x1e6>
 800497a:	1b80      	subs	r0, r0, r6
 800497c:	6060      	str	r0, [r4, #4]
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	2300      	movs	r3, #0
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004988:	e7aa      	b.n	80048e0 <_printf_i+0x148>
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	4632      	mov	r2, r6
 800498e:	4649      	mov	r1, r9
 8004990:	4640      	mov	r0, r8
 8004992:	47d0      	blx	sl
 8004994:	3001      	adds	r0, #1
 8004996:	d0ad      	beq.n	80048f4 <_printf_i+0x15c>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	079b      	lsls	r3, r3, #30
 800499c:	d413      	bmi.n	80049c6 <_printf_i+0x22e>
 800499e:	68e0      	ldr	r0, [r4, #12]
 80049a0:	9b03      	ldr	r3, [sp, #12]
 80049a2:	4298      	cmp	r0, r3
 80049a4:	bfb8      	it	lt
 80049a6:	4618      	movlt	r0, r3
 80049a8:	e7a6      	b.n	80048f8 <_printf_i+0x160>
 80049aa:	2301      	movs	r3, #1
 80049ac:	4632      	mov	r2, r6
 80049ae:	4649      	mov	r1, r9
 80049b0:	4640      	mov	r0, r8
 80049b2:	47d0      	blx	sl
 80049b4:	3001      	adds	r0, #1
 80049b6:	d09d      	beq.n	80048f4 <_printf_i+0x15c>
 80049b8:	3501      	adds	r5, #1
 80049ba:	68e3      	ldr	r3, [r4, #12]
 80049bc:	9903      	ldr	r1, [sp, #12]
 80049be:	1a5b      	subs	r3, r3, r1
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	dcf2      	bgt.n	80049aa <_printf_i+0x212>
 80049c4:	e7eb      	b.n	800499e <_printf_i+0x206>
 80049c6:	2500      	movs	r5, #0
 80049c8:	f104 0619 	add.w	r6, r4, #25
 80049cc:	e7f5      	b.n	80049ba <_printf_i+0x222>
 80049ce:	bf00      	nop
 80049d0:	08004dd1 	.word	0x08004dd1
 80049d4:	08004de2 	.word	0x08004de2

080049d8 <__sflush_r>:
 80049d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e0:	0716      	lsls	r6, r2, #28
 80049e2:	4605      	mov	r5, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	d454      	bmi.n	8004a92 <__sflush_r+0xba>
 80049e8:	684b      	ldr	r3, [r1, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dc02      	bgt.n	80049f4 <__sflush_r+0x1c>
 80049ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dd48      	ble.n	8004a86 <__sflush_r+0xae>
 80049f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049f6:	2e00      	cmp	r6, #0
 80049f8:	d045      	beq.n	8004a86 <__sflush_r+0xae>
 80049fa:	2300      	movs	r3, #0
 80049fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a00:	682f      	ldr	r7, [r5, #0]
 8004a02:	6a21      	ldr	r1, [r4, #32]
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	d030      	beq.n	8004a6a <__sflush_r+0x92>
 8004a08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	0759      	lsls	r1, r3, #29
 8004a0e:	d505      	bpl.n	8004a1c <__sflush_r+0x44>
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	1ad2      	subs	r2, r2, r3
 8004a14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a16:	b10b      	cbz	r3, 8004a1c <__sflush_r+0x44>
 8004a18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a20:	6a21      	ldr	r1, [r4, #32]
 8004a22:	4628      	mov	r0, r5
 8004a24:	47b0      	blx	r6
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	d106      	bne.n	8004a3a <__sflush_r+0x62>
 8004a2c:	6829      	ldr	r1, [r5, #0]
 8004a2e:	291d      	cmp	r1, #29
 8004a30:	d82b      	bhi.n	8004a8a <__sflush_r+0xb2>
 8004a32:	4a2a      	ldr	r2, [pc, #168]	@ (8004adc <__sflush_r+0x104>)
 8004a34:	410a      	asrs	r2, r1
 8004a36:	07d6      	lsls	r6, r2, #31
 8004a38:	d427      	bmi.n	8004a8a <__sflush_r+0xb2>
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	6062      	str	r2, [r4, #4]
 8004a3e:	04d9      	lsls	r1, r3, #19
 8004a40:	6922      	ldr	r2, [r4, #16]
 8004a42:	6022      	str	r2, [r4, #0]
 8004a44:	d504      	bpl.n	8004a50 <__sflush_r+0x78>
 8004a46:	1c42      	adds	r2, r0, #1
 8004a48:	d101      	bne.n	8004a4e <__sflush_r+0x76>
 8004a4a:	682b      	ldr	r3, [r5, #0]
 8004a4c:	b903      	cbnz	r3, 8004a50 <__sflush_r+0x78>
 8004a4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a52:	602f      	str	r7, [r5, #0]
 8004a54:	b1b9      	cbz	r1, 8004a86 <__sflush_r+0xae>
 8004a56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	d002      	beq.n	8004a64 <__sflush_r+0x8c>
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f7ff fbf2 	bl	8004248 <_free_r>
 8004a64:	2300      	movs	r3, #0
 8004a66:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a68:	e00d      	b.n	8004a86 <__sflush_r+0xae>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b0      	blx	r6
 8004a70:	4602      	mov	r2, r0
 8004a72:	1c50      	adds	r0, r2, #1
 8004a74:	d1c9      	bne.n	8004a0a <__sflush_r+0x32>
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0c6      	beq.n	8004a0a <__sflush_r+0x32>
 8004a7c:	2b1d      	cmp	r3, #29
 8004a7e:	d001      	beq.n	8004a84 <__sflush_r+0xac>
 8004a80:	2b16      	cmp	r3, #22
 8004a82:	d11e      	bne.n	8004ac2 <__sflush_r+0xea>
 8004a84:	602f      	str	r7, [r5, #0]
 8004a86:	2000      	movs	r0, #0
 8004a88:	e022      	b.n	8004ad0 <__sflush_r+0xf8>
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a8e:	b21b      	sxth	r3, r3
 8004a90:	e01b      	b.n	8004aca <__sflush_r+0xf2>
 8004a92:	690f      	ldr	r7, [r1, #16]
 8004a94:	2f00      	cmp	r7, #0
 8004a96:	d0f6      	beq.n	8004a86 <__sflush_r+0xae>
 8004a98:	0793      	lsls	r3, r2, #30
 8004a9a:	680e      	ldr	r6, [r1, #0]
 8004a9c:	bf08      	it	eq
 8004a9e:	694b      	ldreq	r3, [r1, #20]
 8004aa0:	600f      	str	r7, [r1, #0]
 8004aa2:	bf18      	it	ne
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	eba6 0807 	sub.w	r8, r6, r7
 8004aaa:	608b      	str	r3, [r1, #8]
 8004aac:	f1b8 0f00 	cmp.w	r8, #0
 8004ab0:	dde9      	ble.n	8004a86 <__sflush_r+0xae>
 8004ab2:	6a21      	ldr	r1, [r4, #32]
 8004ab4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ab6:	4643      	mov	r3, r8
 8004ab8:	463a      	mov	r2, r7
 8004aba:	4628      	mov	r0, r5
 8004abc:	47b0      	blx	r6
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	dc08      	bgt.n	8004ad4 <__sflush_r+0xfc>
 8004ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad4:	4407      	add	r7, r0
 8004ad6:	eba8 0800 	sub.w	r8, r8, r0
 8004ada:	e7e7      	b.n	8004aac <__sflush_r+0xd4>
 8004adc:	dfbffffe 	.word	0xdfbffffe

08004ae0 <_fflush_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	690b      	ldr	r3, [r1, #16]
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	b913      	cbnz	r3, 8004af0 <_fflush_r+0x10>
 8004aea:	2500      	movs	r5, #0
 8004aec:	4628      	mov	r0, r5
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	b118      	cbz	r0, 8004afa <_fflush_r+0x1a>
 8004af2:	6a03      	ldr	r3, [r0, #32]
 8004af4:	b90b      	cbnz	r3, 8004afa <_fflush_r+0x1a>
 8004af6:	f7ff fa9f 	bl	8004038 <__sinit>
 8004afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f3      	beq.n	8004aea <_fflush_r+0xa>
 8004b02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b04:	07d0      	lsls	r0, r2, #31
 8004b06:	d404      	bmi.n	8004b12 <_fflush_r+0x32>
 8004b08:	0599      	lsls	r1, r3, #22
 8004b0a:	d402      	bmi.n	8004b12 <_fflush_r+0x32>
 8004b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b0e:	f7ff fb98 	bl	8004242 <__retarget_lock_acquire_recursive>
 8004b12:	4628      	mov	r0, r5
 8004b14:	4621      	mov	r1, r4
 8004b16:	f7ff ff5f 	bl	80049d8 <__sflush_r>
 8004b1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b1c:	07da      	lsls	r2, r3, #31
 8004b1e:	4605      	mov	r5, r0
 8004b20:	d4e4      	bmi.n	8004aec <_fflush_r+0xc>
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	059b      	lsls	r3, r3, #22
 8004b26:	d4e1      	bmi.n	8004aec <_fflush_r+0xc>
 8004b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b2a:	f7ff fb8b 	bl	8004244 <__retarget_lock_release_recursive>
 8004b2e:	e7dd      	b.n	8004aec <_fflush_r+0xc>

08004b30 <__swbuf_r>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	460e      	mov	r6, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	4605      	mov	r5, r0
 8004b38:	b118      	cbz	r0, 8004b42 <__swbuf_r+0x12>
 8004b3a:	6a03      	ldr	r3, [r0, #32]
 8004b3c:	b90b      	cbnz	r3, 8004b42 <__swbuf_r+0x12>
 8004b3e:	f7ff fa7b 	bl	8004038 <__sinit>
 8004b42:	69a3      	ldr	r3, [r4, #24]
 8004b44:	60a3      	str	r3, [r4, #8]
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	071a      	lsls	r2, r3, #28
 8004b4a:	d501      	bpl.n	8004b50 <__swbuf_r+0x20>
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	b943      	cbnz	r3, 8004b62 <__swbuf_r+0x32>
 8004b50:	4621      	mov	r1, r4
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 f82a 	bl	8004bac <__swsetup_r>
 8004b58:	b118      	cbz	r0, 8004b62 <__swbuf_r+0x32>
 8004b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8004b5e:	4638      	mov	r0, r7
 8004b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	6922      	ldr	r2, [r4, #16]
 8004b66:	1a98      	subs	r0, r3, r2
 8004b68:	6963      	ldr	r3, [r4, #20]
 8004b6a:	b2f6      	uxtb	r6, r6
 8004b6c:	4283      	cmp	r3, r0
 8004b6e:	4637      	mov	r7, r6
 8004b70:	dc05      	bgt.n	8004b7e <__swbuf_r+0x4e>
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f7ff ffb3 	bl	8004ae0 <_fflush_r>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d1ed      	bne.n	8004b5a <__swbuf_r+0x2a>
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	6022      	str	r2, [r4, #0]
 8004b8a:	701e      	strb	r6, [r3, #0]
 8004b8c:	6962      	ldr	r2, [r4, #20]
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d004      	beq.n	8004b9e <__swbuf_r+0x6e>
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	07db      	lsls	r3, r3, #31
 8004b98:	d5e1      	bpl.n	8004b5e <__swbuf_r+0x2e>
 8004b9a:	2e0a      	cmp	r6, #10
 8004b9c:	d1df      	bne.n	8004b5e <__swbuf_r+0x2e>
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f7ff ff9d 	bl	8004ae0 <_fflush_r>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d0d9      	beq.n	8004b5e <__swbuf_r+0x2e>
 8004baa:	e7d6      	b.n	8004b5a <__swbuf_r+0x2a>

08004bac <__swsetup_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4b29      	ldr	r3, [pc, #164]	@ (8004c54 <__swsetup_r+0xa8>)
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	b118      	cbz	r0, 8004bc0 <__swsetup_r+0x14>
 8004bb8:	6a03      	ldr	r3, [r0, #32]
 8004bba:	b90b      	cbnz	r3, 8004bc0 <__swsetup_r+0x14>
 8004bbc:	f7ff fa3c 	bl	8004038 <__sinit>
 8004bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc4:	0719      	lsls	r1, r3, #28
 8004bc6:	d422      	bmi.n	8004c0e <__swsetup_r+0x62>
 8004bc8:	06da      	lsls	r2, r3, #27
 8004bca:	d407      	bmi.n	8004bdc <__swsetup_r+0x30>
 8004bcc:	2209      	movs	r2, #9
 8004bce:	602a      	str	r2, [r5, #0]
 8004bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	e033      	b.n	8004c44 <__swsetup_r+0x98>
 8004bdc:	0758      	lsls	r0, r3, #29
 8004bde:	d512      	bpl.n	8004c06 <__swsetup_r+0x5a>
 8004be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004be2:	b141      	cbz	r1, 8004bf6 <__swsetup_r+0x4a>
 8004be4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004be8:	4299      	cmp	r1, r3
 8004bea:	d002      	beq.n	8004bf2 <__swsetup_r+0x46>
 8004bec:	4628      	mov	r0, r5
 8004bee:	f7ff fb2b 	bl	8004248 <_free_r>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bfc:	81a3      	strh	r3, [r4, #12]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6063      	str	r3, [r4, #4]
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	b94b      	cbnz	r3, 8004c26 <__swsetup_r+0x7a>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1c:	d003      	beq.n	8004c26 <__swsetup_r+0x7a>
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 f84f 	bl	8004cc4 <__smakebuf_r>
 8004c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c2a:	f013 0201 	ands.w	r2, r3, #1
 8004c2e:	d00a      	beq.n	8004c46 <__swsetup_r+0x9a>
 8004c30:	2200      	movs	r2, #0
 8004c32:	60a2      	str	r2, [r4, #8]
 8004c34:	6962      	ldr	r2, [r4, #20]
 8004c36:	4252      	negs	r2, r2
 8004c38:	61a2      	str	r2, [r4, #24]
 8004c3a:	6922      	ldr	r2, [r4, #16]
 8004c3c:	b942      	cbnz	r2, 8004c50 <__swsetup_r+0xa4>
 8004c3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c42:	d1c5      	bne.n	8004bd0 <__swsetup_r+0x24>
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
 8004c46:	0799      	lsls	r1, r3, #30
 8004c48:	bf58      	it	pl
 8004c4a:	6962      	ldrpl	r2, [r4, #20]
 8004c4c:	60a2      	str	r2, [r4, #8]
 8004c4e:	e7f4      	b.n	8004c3a <__swsetup_r+0x8e>
 8004c50:	2000      	movs	r0, #0
 8004c52:	e7f7      	b.n	8004c44 <__swsetup_r+0x98>
 8004c54:	20000018 	.word	0x20000018

08004c58 <_sbrk_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d06      	ldr	r5, [pc, #24]	@ (8004c74 <_sbrk_r+0x1c>)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	f7fc f824 	bl	8000cb0 <_sbrk>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d102      	bne.n	8004c72 <_sbrk_r+0x1a>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	b103      	cbz	r3, 8004c72 <_sbrk_r+0x1a>
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	20000314 	.word	0x20000314

08004c78 <__swhatbuf_r>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c80:	2900      	cmp	r1, #0
 8004c82:	b096      	sub	sp, #88	@ 0x58
 8004c84:	4615      	mov	r5, r2
 8004c86:	461e      	mov	r6, r3
 8004c88:	da0d      	bge.n	8004ca6 <__swhatbuf_r+0x2e>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	bf14      	ite	ne
 8004c96:	2340      	movne	r3, #64	@ 0x40
 8004c98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	6031      	str	r1, [r6, #0]
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	b016      	add	sp, #88	@ 0x58
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
 8004ca6:	466a      	mov	r2, sp
 8004ca8:	f000 f848 	bl	8004d3c <_fstat_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	dbec      	blt.n	8004c8a <__swhatbuf_r+0x12>
 8004cb0:	9901      	ldr	r1, [sp, #4]
 8004cb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004cba:	4259      	negs	r1, r3
 8004cbc:	4159      	adcs	r1, r3
 8004cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cc2:	e7eb      	b.n	8004c9c <__swhatbuf_r+0x24>

08004cc4 <__smakebuf_r>:
 8004cc4:	898b      	ldrh	r3, [r1, #12]
 8004cc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cc8:	079d      	lsls	r5, r3, #30
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	d507      	bpl.n	8004ce0 <__smakebuf_r+0x1c>
 8004cd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	2301      	movs	r3, #1
 8004cda:	6163      	str	r3, [r4, #20]
 8004cdc:	b003      	add	sp, #12
 8004cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce0:	ab01      	add	r3, sp, #4
 8004ce2:	466a      	mov	r2, sp
 8004ce4:	f7ff ffc8 	bl	8004c78 <__swhatbuf_r>
 8004ce8:	9f00      	ldr	r7, [sp, #0]
 8004cea:	4605      	mov	r5, r0
 8004cec:	4639      	mov	r1, r7
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f7ff fb16 	bl	8004320 <_malloc_r>
 8004cf4:	b948      	cbnz	r0, 8004d0a <__smakebuf_r+0x46>
 8004cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfa:	059a      	lsls	r2, r3, #22
 8004cfc:	d4ee      	bmi.n	8004cdc <__smakebuf_r+0x18>
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	f043 0302 	orr.w	r3, r3, #2
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	e7e2      	b.n	8004cd0 <__smakebuf_r+0xc>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	6020      	str	r0, [r4, #0]
 8004d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	9b01      	ldr	r3, [sp, #4]
 8004d16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d1a:	b15b      	cbz	r3, 8004d34 <__smakebuf_r+0x70>
 8004d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 f81d 	bl	8004d60 <_isatty_r>
 8004d26:	b128      	cbz	r0, 8004d34 <__smakebuf_r+0x70>
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	81a3      	strh	r3, [r4, #12]
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	431d      	orrs	r5, r3
 8004d38:	81a5      	strh	r5, [r4, #12]
 8004d3a:	e7cf      	b.n	8004cdc <__smakebuf_r+0x18>

08004d3c <_fstat_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4d07      	ldr	r5, [pc, #28]	@ (8004d5c <_fstat_r+0x20>)
 8004d40:	2300      	movs	r3, #0
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	f7fb ff88 	bl	8000c5e <_fstat>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d102      	bne.n	8004d58 <_fstat_r+0x1c>
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	b103      	cbz	r3, 8004d58 <_fstat_r+0x1c>
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	bd38      	pop	{r3, r4, r5, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000314 	.word	0x20000314

08004d60 <_isatty_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4d06      	ldr	r5, [pc, #24]	@ (8004d7c <_isatty_r+0x1c>)
 8004d64:	2300      	movs	r3, #0
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	f7fb ff87 	bl	8000c7e <_isatty>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d102      	bne.n	8004d7a <_isatty_r+0x1a>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	b103      	cbz	r3, 8004d7a <_isatty_r+0x1a>
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	20000314 	.word	0x20000314

08004d80 <_init>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	bf00      	nop
 8004d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d86:	bc08      	pop	{r3}
 8004d88:	469e      	mov	lr, r3
 8004d8a:	4770      	bx	lr

08004d8c <_fini>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr
